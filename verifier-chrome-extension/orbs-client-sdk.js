var Orbs=function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=31)}([function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}e.exports=function(e,t,i){return t&&r(e.prototype,t),i&&r(e,i),e}},function(e,t,r){var i=r(62),n=r(63),a=r(64);e.exports=function(e,t){return i(e)||n(e,t)||a()}},function(e,t,r){"use strict";var i=t;i.version=r(32).version,i.utils=r(33),i.rand=r(36),i.curve=r(16),i.curves=r(42),i.ec=r(50),i.eddsa=r(54)},function(e,t,r){var i=r(65),n=r(66);e.exports=function(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?n(e):t}},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},r(t)}e.exports=r},function(e,t,r){var i=r(67);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}},function(e,t,r){e.exports=r(60)},function(e,t,r){"use strict";var i=r(25),n=r(69),a=Object.prototype.toString;function s(e){return"[object Array]"===a.call(e)}function f(e){return null!==e&&"object"==typeof e}function o(e){return"[object Function]"===a.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,i=e.length;r<i;r++)t.call(null,e[r],r,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:n,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:o,isStream:function(e){return f(e)&&o(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,i){"object"==typeof t[i]&&"object"==typeof r?t[i]=e(t[i],r):t[i]=r}for(var i=0,n=arguments.length;i<n;i++)c(arguments[i],r);return t},extend:function(e,t,r){return c(t,function(t,n){e[n]=r&&"function"==typeof t?i(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";var i=r(12),n=r(17);function a(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function s(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function f(e){return 1===e.length?"0"+e:e}function o(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=n,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(var i=0,n=0;n<e.length;n++){var s=e.charCodeAt(n);s<128?r[i++]=s:s<2048?(r[i++]=s>>6|192,r[i++]=63&s|128):a(e,n)?(s=65536+((1023&s)<<10)+(1023&e.charCodeAt(++n)),r[i++]=s>>18|240,r[i++]=s>>12&63|128,r[i++]=s>>6&63|128,r[i++]=63&s|128):(r[i++]=s>>12|224,r[i++]=s>>6&63|128,r[i++]=63&s|128)}else for(n=0;n<e.length;n++)r[n]=0|e[n];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=f(e[r].toString(16));return t},t.htonl=s,t.toHex32=function(e,t){for(var r="",i=0;i<e.length;i++){var n=e[i];"little"===t&&(n=s(n)),r+=o(n.toString(16))}return r},t.zero2=f,t.zero8=o,t.join32=function(e,t,r,n){var a=r-t;i(a%4==0);for(var s=new Array(a/4),f=0,o=t;f<s.length;f++,o+=4){var c;c="big"===n?e[o]<<24|e[o+1]<<16|e[o+2]<<8|e[o+3]:e[o+3]<<24|e[o+2]<<16|e[o+1]<<8|e[o],s[f]=c>>>0}return s},t.split32=function(e,t){for(var r=new Array(4*e.length),i=0,n=0;i<e.length;i++,n+=4){var a=e[i];"big"===t?(r[n]=a>>>24,r[n+1]=a>>>16&255,r[n+2]=a>>>8&255,r[n+3]=255&a):(r[n+3]=a>>>24,r[n+2]=a>>>16&255,r[n+1]=a>>>8&255,r[n]=255&a)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,i){return e+t+r+i>>>0},t.sum32_5=function(e,t,r,i,n){return e+t+r+i+n>>>0},t.sum64=function(e,t,r,i){var n=e[t],a=i+e[t+1]>>>0,s=(a<i?1:0)+r+n;e[t]=s>>>0,e[t+1]=a},t.sum64_hi=function(e,t,r,i){return(t+i>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,i){return t+i>>>0},t.sum64_4_hi=function(e,t,r,i,n,a,s,f){var o=0,c=t;return o+=(c=c+i>>>0)<t?1:0,o+=(c=c+a>>>0)<a?1:0,e+r+n+s+(o+=(c=c+f>>>0)<f?1:0)>>>0},t.sum64_4_lo=function(e,t,r,i,n,a,s,f){return t+i+a+f>>>0},t.sum64_5_hi=function(e,t,r,i,n,a,s,f,o,c){var d=0,u=t;return d+=(u=u+i>>>0)<t?1:0,d+=(u=u+a>>>0)<a?1:0,d+=(u=u+f>>>0)<f?1:0,e+r+n+s+o+(d+=(u=u+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,t,r,i,n,a,s,f,o,c){return t+i+a+f+c>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},function(e,t,r){(function(e){!function(e,t){"use strict";function i(e,t){if(!e)throw new Error(t||"Assertion failed")}function n(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function a(e,t,r){if(a.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var s;"object"==typeof e?e.exports=a:t.BN=a,a.BN=a,a.wordSize=26;try{s=r(35).Buffer}catch(e){}function f(e,t,r){for(var i=0,n=Math.min(e.length,r),a=t;a<n;a++){var s=e.charCodeAt(a)-48;i<<=4,i|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return i}function o(e,t,r,i){for(var n=0,a=Math.min(e.length,r),s=t;s<a;s++){var f=e.charCodeAt(s)-48;n*=i,n+=f>=49?f-49+10:f>=17?f-17+10:f}return n}a.isBN=function(e){return e instanceof a||null!==e&&"object"==typeof e&&e.constructor.wordSize===a.wordSize&&Array.isArray(e.words)},a.max=function(e,t){return e.cmp(t)>0?e:t},a.min=function(e,t){return e.cmp(t)<0?e:t},a.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),i(t===(0|t)&&t>=2&&t<=36);var n=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&n++,16===t?this._parseHex(e,n):this._parseBase(e,t,n),"-"===e[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),t,r)},a.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(i(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},a.prototype._initArray=function(e,t,r){if(i("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var a,s,f=0;if("be"===r)for(n=e.length-1,a=0;n>=0;n-=3)s=e[n]|e[n-1]<<8|e[n-2]<<16,this.words[a]|=s<<f&67108863,this.words[a+1]=s>>>26-f&67108863,(f+=24)>=26&&(f-=26,a++);else if("le"===r)for(n=0,a=0;n<e.length;n+=3)s=e[n]|e[n+1]<<8|e[n+2]<<16,this.words[a]|=s<<f&67108863,this.words[a+1]=s>>>26-f&67108863,(f+=24)>=26&&(f-=26,a++);return this.strip()},a.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,n,a=0;for(r=e.length-6,i=0;r>=t;r-=6)n=f(e,r,r+6),this.words[i]|=n<<a&67108863,this.words[i+1]|=n>>>26-a&4194303,(a+=24)>=26&&(a-=26,i++);r+6!==t&&(n=f(e,t,r+6),this.words[i]|=n<<a&67108863,this.words[i+1]|=n>>>26-a&4194303),this.strip()},a.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=t)i++;i--,n=n/t|0;for(var a=e.length-r,s=a%i,f=Math.min(a,a-s)+r,c=0,d=r;d<f;d+=i)c=o(e,d,d+i,t),this.imuln(n),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==s){var u=1;for(c=o(e,d,e.length,t),d=0;d<s;d++)u*=t;this.imuln(u),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},a.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},a.prototype.clone=function(){var e=new a(null);return this.copy(e),e},a.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},a.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},a.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],u=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function h(e,t,r){r.negative=t.negative^e.negative;var i=e.length+t.length|0;r.length=i,i=i-1|0;var n=0|e.words[0],a=0|t.words[0],s=n*a,f=67108863&s,o=s/67108864|0;r.words[0]=f;for(var c=1;c<i;c++){for(var d=o>>>26,u=67108863&o,h=Math.min(c,t.length-1),l=Math.max(0,c-e.length+1);l<=h;l++){var b=c-l|0;d+=(s=(n=0|e.words[b])*(a=0|t.words[l])+u)/67108864|0,u=67108863&s}r.words[c]=0|u,o=0|d}return 0!==o?r.words[c]=0|o:r.length--,r.strip()}a.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var n=0,a=0,s=0;s<this.length;s++){var f=this.words[s],o=(16777215&(f<<n|a)).toString(16);r=0!==(a=f>>>24-n&16777215)||s!==this.length-1?c[6-o.length]+o+r:o+r,(n+=2)>=26&&(n-=26,s--)}for(0!==a&&(r=a.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var h=d[e],l=u[e];r="";var b=this.clone();for(b.negative=0;!b.isZero();){var p=b.modn(l).toString(e);r=(b=b.idivn(l)).isZero()?p+r:c[h-p.length]+p+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}i(!1,"Base should be between 2 and 36")},a.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&i(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},a.prototype.toJSON=function(){return this.toString(16)},a.prototype.toBuffer=function(e,t){return i(void 0!==s),this.toArrayLike(s,e,t)},a.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},a.prototype.toArrayLike=function(e,t,r){var n=this.byteLength(),a=r||Math.max(1,n);i(n<=a,"byte array longer than desired length"),i(a>0,"Requested array length <= 0"),this.strip();var s,f,o="le"===t,c=new e(a),d=this.clone();if(o){for(f=0;!d.isZero();f++)s=d.andln(255),d.iushrn(8),c[f]=s;for(;f<a;f++)c[f]=0}else{for(f=0;f<a-n;f++)c[f]=0;for(f=0;!d.isZero();f++)s=d.andln(255),d.iushrn(8),c[a-f-1]=s}return c},Math.clz32?a.prototype._countBits=function(e){return 32-Math.clz32(e)}:a.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},a.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},a.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},a.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},a.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},a.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},a.prototype.isNeg=function(){return 0!==this.negative},a.prototype.neg=function(){return this.clone().ineg()},a.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},a.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},a.prototype.ior=function(e){return i(0==(this.negative|e.negative)),this.iuor(e)},a.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},a.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},a.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this.strip()},a.prototype.iand=function(e){return i(0==(this.negative|e.negative)),this.iuand(e)},a.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},a.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},a.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var i=0;i<r.length;i++)this.words[i]=t.words[i]^r.words[i];if(this!==t)for(;i<t.length;i++)this.words[i]=t.words[i];return this.length=t.length,this.strip()},a.prototype.ixor=function(e){return i(0==(this.negative|e.negative)),this.iuxor(e)},a.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},a.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},a.prototype.inotn=function(e){i("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var n=0;n<t;n++)this.words[n]=67108863&~this.words[n];return r>0&&(this.words[n]=~this.words[n]&67108863>>26-r),this.strip()},a.prototype.notn=function(e){return this.clone().inotn(e)},a.prototype.setn=function(e,t){i("number"==typeof e&&e>=0);var r=e/26|0,n=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<n:this.words[r]&~(1<<n),this.strip()},a.prototype.iadd=function(e){var t,r,i;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,i=e):(r=e,i=this);for(var n=0,a=0;a<i.length;a++)t=(0|r.words[a])+(0|i.words[a])+n,this.words[a]=67108863&t,n=t>>>26;for(;0!==n&&a<r.length;a++)t=(0|r.words[a])+n,this.words[a]=67108863&t,n=t>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this},a.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},a.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,i,n=this.cmp(e);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=e):(r=e,i=this);for(var a=0,s=0;s<i.length;s++)a=(t=(0|r.words[s])-(0|i.words[s])+a)>>26,this.words[s]=67108863&t;for(;0!==a&&s<r.length;s++)a=(t=(0|r.words[s])+a)>>26,this.words[s]=67108863&t;if(0===a&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},a.prototype.sub=function(e){return this.clone().isub(e)};var l=function(e,t,r){var i,n,a,s=e.words,f=t.words,o=r.words,c=0,d=0|s[0],u=8191&d,h=d>>>13,l=0|s[1],b=8191&l,p=l>>>13,y=0|s[2],v=8191&y,m=y>>>13,g=0|s[3],w=8191&g,T=g>>>13,M=0|s[4],S=8191&M,A=M>>>13,_=0|s[5],E=8191&_,U=_>>>13,x=0|s[6],I=8191&x,R=x>>>13,O=0|s[7],N=8191&O,k=O>>>13,C=0|s[8],z=8191&C,B=C>>>13,P=0|s[9],L=8191&P,D=P>>>13,q=0|f[0],j=8191&q,V=q>>>13,F=0|f[1],H=8191&F,J=F>>>13,X=0|f[2],K=8191&X,W=X>>>13,G=0|f[3],Y=8191&G,Z=G>>>13,Q=0|f[4],$=8191&Q,ee=Q>>>13,te=0|f[5],re=8191&te,ie=te>>>13,ne=0|f[6],ae=8191&ne,se=ne>>>13,fe=0|f[7],oe=8191&fe,ce=fe>>>13,de=0|f[8],ue=8191&de,he=de>>>13,le=0|f[9],be=8191&le,pe=le>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(c+(i=Math.imul(u,j))|0)+((8191&(n=(n=Math.imul(u,V))+Math.imul(h,j)|0))<<13)|0;c=((a=Math.imul(h,V))+(n>>>13)|0)+(ye>>>26)|0,ye&=67108863,i=Math.imul(b,j),n=(n=Math.imul(b,V))+Math.imul(p,j)|0,a=Math.imul(p,V);var ve=(c+(i=i+Math.imul(u,H)|0)|0)+((8191&(n=(n=n+Math.imul(u,J)|0)+Math.imul(h,H)|0))<<13)|0;c=((a=a+Math.imul(h,J)|0)+(n>>>13)|0)+(ve>>>26)|0,ve&=67108863,i=Math.imul(v,j),n=(n=Math.imul(v,V))+Math.imul(m,j)|0,a=Math.imul(m,V),i=i+Math.imul(b,H)|0,n=(n=n+Math.imul(b,J)|0)+Math.imul(p,H)|0,a=a+Math.imul(p,J)|0;var me=(c+(i=i+Math.imul(u,K)|0)|0)+((8191&(n=(n=n+Math.imul(u,W)|0)+Math.imul(h,K)|0))<<13)|0;c=((a=a+Math.imul(h,W)|0)+(n>>>13)|0)+(me>>>26)|0,me&=67108863,i=Math.imul(w,j),n=(n=Math.imul(w,V))+Math.imul(T,j)|0,a=Math.imul(T,V),i=i+Math.imul(v,H)|0,n=(n=n+Math.imul(v,J)|0)+Math.imul(m,H)|0,a=a+Math.imul(m,J)|0,i=i+Math.imul(b,K)|0,n=(n=n+Math.imul(b,W)|0)+Math.imul(p,K)|0,a=a+Math.imul(p,W)|0;var ge=(c+(i=i+Math.imul(u,Y)|0)|0)+((8191&(n=(n=n+Math.imul(u,Z)|0)+Math.imul(h,Y)|0))<<13)|0;c=((a=a+Math.imul(h,Z)|0)+(n>>>13)|0)+(ge>>>26)|0,ge&=67108863,i=Math.imul(S,j),n=(n=Math.imul(S,V))+Math.imul(A,j)|0,a=Math.imul(A,V),i=i+Math.imul(w,H)|0,n=(n=n+Math.imul(w,J)|0)+Math.imul(T,H)|0,a=a+Math.imul(T,J)|0,i=i+Math.imul(v,K)|0,n=(n=n+Math.imul(v,W)|0)+Math.imul(m,K)|0,a=a+Math.imul(m,W)|0,i=i+Math.imul(b,Y)|0,n=(n=n+Math.imul(b,Z)|0)+Math.imul(p,Y)|0,a=a+Math.imul(p,Z)|0;var we=(c+(i=i+Math.imul(u,$)|0)|0)+((8191&(n=(n=n+Math.imul(u,ee)|0)+Math.imul(h,$)|0))<<13)|0;c=((a=a+Math.imul(h,ee)|0)+(n>>>13)|0)+(we>>>26)|0,we&=67108863,i=Math.imul(E,j),n=(n=Math.imul(E,V))+Math.imul(U,j)|0,a=Math.imul(U,V),i=i+Math.imul(S,H)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(A,H)|0,a=a+Math.imul(A,J)|0,i=i+Math.imul(w,K)|0,n=(n=n+Math.imul(w,W)|0)+Math.imul(T,K)|0,a=a+Math.imul(T,W)|0,i=i+Math.imul(v,Y)|0,n=(n=n+Math.imul(v,Z)|0)+Math.imul(m,Y)|0,a=a+Math.imul(m,Z)|0,i=i+Math.imul(b,$)|0,n=(n=n+Math.imul(b,ee)|0)+Math.imul(p,$)|0,a=a+Math.imul(p,ee)|0;var Te=(c+(i=i+Math.imul(u,re)|0)|0)+((8191&(n=(n=n+Math.imul(u,ie)|0)+Math.imul(h,re)|0))<<13)|0;c=((a=a+Math.imul(h,ie)|0)+(n>>>13)|0)+(Te>>>26)|0,Te&=67108863,i=Math.imul(I,j),n=(n=Math.imul(I,V))+Math.imul(R,j)|0,a=Math.imul(R,V),i=i+Math.imul(E,H)|0,n=(n=n+Math.imul(E,J)|0)+Math.imul(U,H)|0,a=a+Math.imul(U,J)|0,i=i+Math.imul(S,K)|0,n=(n=n+Math.imul(S,W)|0)+Math.imul(A,K)|0,a=a+Math.imul(A,W)|0,i=i+Math.imul(w,Y)|0,n=(n=n+Math.imul(w,Z)|0)+Math.imul(T,Y)|0,a=a+Math.imul(T,Z)|0,i=i+Math.imul(v,$)|0,n=(n=n+Math.imul(v,ee)|0)+Math.imul(m,$)|0,a=a+Math.imul(m,ee)|0,i=i+Math.imul(b,re)|0,n=(n=n+Math.imul(b,ie)|0)+Math.imul(p,re)|0,a=a+Math.imul(p,ie)|0;var Me=(c+(i=i+Math.imul(u,ae)|0)|0)+((8191&(n=(n=n+Math.imul(u,se)|0)+Math.imul(h,ae)|0))<<13)|0;c=((a=a+Math.imul(h,se)|0)+(n>>>13)|0)+(Me>>>26)|0,Me&=67108863,i=Math.imul(N,j),n=(n=Math.imul(N,V))+Math.imul(k,j)|0,a=Math.imul(k,V),i=i+Math.imul(I,H)|0,n=(n=n+Math.imul(I,J)|0)+Math.imul(R,H)|0,a=a+Math.imul(R,J)|0,i=i+Math.imul(E,K)|0,n=(n=n+Math.imul(E,W)|0)+Math.imul(U,K)|0,a=a+Math.imul(U,W)|0,i=i+Math.imul(S,Y)|0,n=(n=n+Math.imul(S,Z)|0)+Math.imul(A,Y)|0,a=a+Math.imul(A,Z)|0,i=i+Math.imul(w,$)|0,n=(n=n+Math.imul(w,ee)|0)+Math.imul(T,$)|0,a=a+Math.imul(T,ee)|0,i=i+Math.imul(v,re)|0,n=(n=n+Math.imul(v,ie)|0)+Math.imul(m,re)|0,a=a+Math.imul(m,ie)|0,i=i+Math.imul(b,ae)|0,n=(n=n+Math.imul(b,se)|0)+Math.imul(p,ae)|0,a=a+Math.imul(p,se)|0;var Se=(c+(i=i+Math.imul(u,oe)|0)|0)+((8191&(n=(n=n+Math.imul(u,ce)|0)+Math.imul(h,oe)|0))<<13)|0;c=((a=a+Math.imul(h,ce)|0)+(n>>>13)|0)+(Se>>>26)|0,Se&=67108863,i=Math.imul(z,j),n=(n=Math.imul(z,V))+Math.imul(B,j)|0,a=Math.imul(B,V),i=i+Math.imul(N,H)|0,n=(n=n+Math.imul(N,J)|0)+Math.imul(k,H)|0,a=a+Math.imul(k,J)|0,i=i+Math.imul(I,K)|0,n=(n=n+Math.imul(I,W)|0)+Math.imul(R,K)|0,a=a+Math.imul(R,W)|0,i=i+Math.imul(E,Y)|0,n=(n=n+Math.imul(E,Z)|0)+Math.imul(U,Y)|0,a=a+Math.imul(U,Z)|0,i=i+Math.imul(S,$)|0,n=(n=n+Math.imul(S,ee)|0)+Math.imul(A,$)|0,a=a+Math.imul(A,ee)|0,i=i+Math.imul(w,re)|0,n=(n=n+Math.imul(w,ie)|0)+Math.imul(T,re)|0,a=a+Math.imul(T,ie)|0,i=i+Math.imul(v,ae)|0,n=(n=n+Math.imul(v,se)|0)+Math.imul(m,ae)|0,a=a+Math.imul(m,se)|0,i=i+Math.imul(b,oe)|0,n=(n=n+Math.imul(b,ce)|0)+Math.imul(p,oe)|0,a=a+Math.imul(p,ce)|0;var Ae=(c+(i=i+Math.imul(u,ue)|0)|0)+((8191&(n=(n=n+Math.imul(u,he)|0)+Math.imul(h,ue)|0))<<13)|0;c=((a=a+Math.imul(h,he)|0)+(n>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,i=Math.imul(L,j),n=(n=Math.imul(L,V))+Math.imul(D,j)|0,a=Math.imul(D,V),i=i+Math.imul(z,H)|0,n=(n=n+Math.imul(z,J)|0)+Math.imul(B,H)|0,a=a+Math.imul(B,J)|0,i=i+Math.imul(N,K)|0,n=(n=n+Math.imul(N,W)|0)+Math.imul(k,K)|0,a=a+Math.imul(k,W)|0,i=i+Math.imul(I,Y)|0,n=(n=n+Math.imul(I,Z)|0)+Math.imul(R,Y)|0,a=a+Math.imul(R,Z)|0,i=i+Math.imul(E,$)|0,n=(n=n+Math.imul(E,ee)|0)+Math.imul(U,$)|0,a=a+Math.imul(U,ee)|0,i=i+Math.imul(S,re)|0,n=(n=n+Math.imul(S,ie)|0)+Math.imul(A,re)|0,a=a+Math.imul(A,ie)|0,i=i+Math.imul(w,ae)|0,n=(n=n+Math.imul(w,se)|0)+Math.imul(T,ae)|0,a=a+Math.imul(T,se)|0,i=i+Math.imul(v,oe)|0,n=(n=n+Math.imul(v,ce)|0)+Math.imul(m,oe)|0,a=a+Math.imul(m,ce)|0,i=i+Math.imul(b,ue)|0,n=(n=n+Math.imul(b,he)|0)+Math.imul(p,ue)|0,a=a+Math.imul(p,he)|0;var _e=(c+(i=i+Math.imul(u,be)|0)|0)+((8191&(n=(n=n+Math.imul(u,pe)|0)+Math.imul(h,be)|0))<<13)|0;c=((a=a+Math.imul(h,pe)|0)+(n>>>13)|0)+(_e>>>26)|0,_e&=67108863,i=Math.imul(L,H),n=(n=Math.imul(L,J))+Math.imul(D,H)|0,a=Math.imul(D,J),i=i+Math.imul(z,K)|0,n=(n=n+Math.imul(z,W)|0)+Math.imul(B,K)|0,a=a+Math.imul(B,W)|0,i=i+Math.imul(N,Y)|0,n=(n=n+Math.imul(N,Z)|0)+Math.imul(k,Y)|0,a=a+Math.imul(k,Z)|0,i=i+Math.imul(I,$)|0,n=(n=n+Math.imul(I,ee)|0)+Math.imul(R,$)|0,a=a+Math.imul(R,ee)|0,i=i+Math.imul(E,re)|0,n=(n=n+Math.imul(E,ie)|0)+Math.imul(U,re)|0,a=a+Math.imul(U,ie)|0,i=i+Math.imul(S,ae)|0,n=(n=n+Math.imul(S,se)|0)+Math.imul(A,ae)|0,a=a+Math.imul(A,se)|0,i=i+Math.imul(w,oe)|0,n=(n=n+Math.imul(w,ce)|0)+Math.imul(T,oe)|0,a=a+Math.imul(T,ce)|0,i=i+Math.imul(v,ue)|0,n=(n=n+Math.imul(v,he)|0)+Math.imul(m,ue)|0,a=a+Math.imul(m,he)|0;var Ee=(c+(i=i+Math.imul(b,be)|0)|0)+((8191&(n=(n=n+Math.imul(b,pe)|0)+Math.imul(p,be)|0))<<13)|0;c=((a=a+Math.imul(p,pe)|0)+(n>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,i=Math.imul(L,K),n=(n=Math.imul(L,W))+Math.imul(D,K)|0,a=Math.imul(D,W),i=i+Math.imul(z,Y)|0,n=(n=n+Math.imul(z,Z)|0)+Math.imul(B,Y)|0,a=a+Math.imul(B,Z)|0,i=i+Math.imul(N,$)|0,n=(n=n+Math.imul(N,ee)|0)+Math.imul(k,$)|0,a=a+Math.imul(k,ee)|0,i=i+Math.imul(I,re)|0,n=(n=n+Math.imul(I,ie)|0)+Math.imul(R,re)|0,a=a+Math.imul(R,ie)|0,i=i+Math.imul(E,ae)|0,n=(n=n+Math.imul(E,se)|0)+Math.imul(U,ae)|0,a=a+Math.imul(U,se)|0,i=i+Math.imul(S,oe)|0,n=(n=n+Math.imul(S,ce)|0)+Math.imul(A,oe)|0,a=a+Math.imul(A,ce)|0,i=i+Math.imul(w,ue)|0,n=(n=n+Math.imul(w,he)|0)+Math.imul(T,ue)|0,a=a+Math.imul(T,he)|0;var Ue=(c+(i=i+Math.imul(v,be)|0)|0)+((8191&(n=(n=n+Math.imul(v,pe)|0)+Math.imul(m,be)|0))<<13)|0;c=((a=a+Math.imul(m,pe)|0)+(n>>>13)|0)+(Ue>>>26)|0,Ue&=67108863,i=Math.imul(L,Y),n=(n=Math.imul(L,Z))+Math.imul(D,Y)|0,a=Math.imul(D,Z),i=i+Math.imul(z,$)|0,n=(n=n+Math.imul(z,ee)|0)+Math.imul(B,$)|0,a=a+Math.imul(B,ee)|0,i=i+Math.imul(N,re)|0,n=(n=n+Math.imul(N,ie)|0)+Math.imul(k,re)|0,a=a+Math.imul(k,ie)|0,i=i+Math.imul(I,ae)|0,n=(n=n+Math.imul(I,se)|0)+Math.imul(R,ae)|0,a=a+Math.imul(R,se)|0,i=i+Math.imul(E,oe)|0,n=(n=n+Math.imul(E,ce)|0)+Math.imul(U,oe)|0,a=a+Math.imul(U,ce)|0,i=i+Math.imul(S,ue)|0,n=(n=n+Math.imul(S,he)|0)+Math.imul(A,ue)|0,a=a+Math.imul(A,he)|0;var xe=(c+(i=i+Math.imul(w,be)|0)|0)+((8191&(n=(n=n+Math.imul(w,pe)|0)+Math.imul(T,be)|0))<<13)|0;c=((a=a+Math.imul(T,pe)|0)+(n>>>13)|0)+(xe>>>26)|0,xe&=67108863,i=Math.imul(L,$),n=(n=Math.imul(L,ee))+Math.imul(D,$)|0,a=Math.imul(D,ee),i=i+Math.imul(z,re)|0,n=(n=n+Math.imul(z,ie)|0)+Math.imul(B,re)|0,a=a+Math.imul(B,ie)|0,i=i+Math.imul(N,ae)|0,n=(n=n+Math.imul(N,se)|0)+Math.imul(k,ae)|0,a=a+Math.imul(k,se)|0,i=i+Math.imul(I,oe)|0,n=(n=n+Math.imul(I,ce)|0)+Math.imul(R,oe)|0,a=a+Math.imul(R,ce)|0,i=i+Math.imul(E,ue)|0,n=(n=n+Math.imul(E,he)|0)+Math.imul(U,ue)|0,a=a+Math.imul(U,he)|0;var Ie=(c+(i=i+Math.imul(S,be)|0)|0)+((8191&(n=(n=n+Math.imul(S,pe)|0)+Math.imul(A,be)|0))<<13)|0;c=((a=a+Math.imul(A,pe)|0)+(n>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,i=Math.imul(L,re),n=(n=Math.imul(L,ie))+Math.imul(D,re)|0,a=Math.imul(D,ie),i=i+Math.imul(z,ae)|0,n=(n=n+Math.imul(z,se)|0)+Math.imul(B,ae)|0,a=a+Math.imul(B,se)|0,i=i+Math.imul(N,oe)|0,n=(n=n+Math.imul(N,ce)|0)+Math.imul(k,oe)|0,a=a+Math.imul(k,ce)|0,i=i+Math.imul(I,ue)|0,n=(n=n+Math.imul(I,he)|0)+Math.imul(R,ue)|0,a=a+Math.imul(R,he)|0;var Re=(c+(i=i+Math.imul(E,be)|0)|0)+((8191&(n=(n=n+Math.imul(E,pe)|0)+Math.imul(U,be)|0))<<13)|0;c=((a=a+Math.imul(U,pe)|0)+(n>>>13)|0)+(Re>>>26)|0,Re&=67108863,i=Math.imul(L,ae),n=(n=Math.imul(L,se))+Math.imul(D,ae)|0,a=Math.imul(D,se),i=i+Math.imul(z,oe)|0,n=(n=n+Math.imul(z,ce)|0)+Math.imul(B,oe)|0,a=a+Math.imul(B,ce)|0,i=i+Math.imul(N,ue)|0,n=(n=n+Math.imul(N,he)|0)+Math.imul(k,ue)|0,a=a+Math.imul(k,he)|0;var Oe=(c+(i=i+Math.imul(I,be)|0)|0)+((8191&(n=(n=n+Math.imul(I,pe)|0)+Math.imul(R,be)|0))<<13)|0;c=((a=a+Math.imul(R,pe)|0)+(n>>>13)|0)+(Oe>>>26)|0,Oe&=67108863,i=Math.imul(L,oe),n=(n=Math.imul(L,ce))+Math.imul(D,oe)|0,a=Math.imul(D,ce),i=i+Math.imul(z,ue)|0,n=(n=n+Math.imul(z,he)|0)+Math.imul(B,ue)|0,a=a+Math.imul(B,he)|0;var Ne=(c+(i=i+Math.imul(N,be)|0)|0)+((8191&(n=(n=n+Math.imul(N,pe)|0)+Math.imul(k,be)|0))<<13)|0;c=((a=a+Math.imul(k,pe)|0)+(n>>>13)|0)+(Ne>>>26)|0,Ne&=67108863,i=Math.imul(L,ue),n=(n=Math.imul(L,he))+Math.imul(D,ue)|0,a=Math.imul(D,he);var ke=(c+(i=i+Math.imul(z,be)|0)|0)+((8191&(n=(n=n+Math.imul(z,pe)|0)+Math.imul(B,be)|0))<<13)|0;c=((a=a+Math.imul(B,pe)|0)+(n>>>13)|0)+(ke>>>26)|0,ke&=67108863;var Ce=(c+(i=Math.imul(L,be))|0)+((8191&(n=(n=Math.imul(L,pe))+Math.imul(D,be)|0))<<13)|0;return c=((a=Math.imul(D,pe))+(n>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,o[0]=ye,o[1]=ve,o[2]=me,o[3]=ge,o[4]=we,o[5]=Te,o[6]=Me,o[7]=Se,o[8]=Ae,o[9]=_e,o[10]=Ee,o[11]=Ue,o[12]=xe,o[13]=Ie,o[14]=Re,o[15]=Oe,o[16]=Ne,o[17]=ke,o[18]=Ce,0!==c&&(o[19]=c,r.length++),r};function b(e,t,r){return(new p).mulp(e,t,r)}function p(e,t){this.x=e,this.y=t}Math.imul||(l=h),a.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?l(this,e,t):r<63?h(this,e,t):r<1024?function(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var i=0,n=0,a=0;a<r.length-1;a++){var s=n;n=0;for(var f=67108863&i,o=Math.min(a,t.length-1),c=Math.max(0,a-e.length+1);c<=o;c++){var d=a-c,u=(0|e.words[d])*(0|t.words[c]),h=67108863&u;f=67108863&(h=h+f|0),n+=(s=(s=s+(u/67108864|0)|0)+(h>>>26)|0)>>>26,s&=67108863}r.words[a]=f,i=s,s=n}return 0!==i?r.words[a]=i:r.length--,r.strip()}(this,e,t):b(this,e,t)},p.prototype.makeRBT=function(e){for(var t=new Array(e),r=a.prototype._countBits(e)-1,i=0;i<e;i++)t[i]=this.revBin(i,r,e);return t},p.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var i=0,n=0;n<t;n++)i|=(1&e)<<t-n-1,e>>=1;return i},p.prototype.permute=function(e,t,r,i,n,a){for(var s=0;s<a;s++)i[s]=t[e[s]],n[s]=r[e[s]]},p.prototype.transform=function(e,t,r,i,n,a){this.permute(a,e,t,r,i,n);for(var s=1;s<n;s<<=1)for(var f=s<<1,o=Math.cos(2*Math.PI/f),c=Math.sin(2*Math.PI/f),d=0;d<n;d+=f)for(var u=o,h=c,l=0;l<s;l++){var b=r[d+l],p=i[d+l],y=r[d+l+s],v=i[d+l+s],m=u*y-h*v;v=u*v+h*y,y=m,r[d+l]=b+y,i[d+l]=p+v,r[d+l+s]=b-y,i[d+l+s]=p-v,l!==f&&(m=o*u-c*h,h=o*h+c*u,u=m)}},p.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),i=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+i},p.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var i=0;i<r/2;i++){var n=e[i];e[i]=e[r-i-1],e[r-i-1]=n,n=t[i],t[i]=-t[r-i-1],t[r-i-1]=-n}},p.prototype.normalize13b=function(e,t){for(var r=0,i=0;i<t/2;i++){var n=8192*Math.round(e[2*i+1]/t)+Math.round(e[2*i]/t)+r;e[i]=67108863&n,r=n<67108864?0:n/67108864|0}return e},p.prototype.convert13b=function(e,t,r,n){for(var a=0,s=0;s<t;s++)a+=0|e[s],r[2*s]=8191&a,a>>>=13,r[2*s+1]=8191&a,a>>>=13;for(s=2*t;s<n;++s)r[s]=0;i(0===a),i(0==(-8192&a))},p.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},p.prototype.mulp=function(e,t,r){var i=2*this.guessLen13b(e.length,t.length),n=this.makeRBT(i),a=this.stub(i),s=new Array(i),f=new Array(i),o=new Array(i),c=new Array(i),d=new Array(i),u=new Array(i),h=r.words;h.length=i,this.convert13b(e.words,e.length,s,i),this.convert13b(t.words,t.length,c,i),this.transform(s,a,f,o,i,n),this.transform(c,a,d,u,i,n);for(var l=0;l<i;l++){var b=f[l]*d[l]-o[l]*u[l];o[l]=f[l]*u[l]+o[l]*d[l],f[l]=b}return this.conjugate(f,o,i),this.transform(f,o,h,a,i,n),this.conjugate(h,a,i),this.normalize13b(h,i),r.negative=e.negative^t.negative,r.length=e.length+t.length,r.strip()},a.prototype.mul=function(e){var t=new a(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},a.prototype.mulf=function(e){var t=new a(null);return t.words=new Array(this.length+e.length),b(this,e,t)},a.prototype.imul=function(e){return this.clone().mulTo(e,this)},a.prototype.imuln=function(e){i("number"==typeof e),i(e<67108864);for(var t=0,r=0;r<this.length;r++){var n=(0|this.words[r])*e,a=(67108863&n)+(67108863&t);t>>=26,t+=n/67108864|0,t+=a>>>26,this.words[r]=67108863&a}return 0!==t&&(this.words[r]=t,this.length++),this},a.prototype.muln=function(e){return this.clone().imuln(e)},a.prototype.sqr=function(){return this.mul(this)},a.prototype.isqr=function(){return this.imul(this.clone())},a.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var i=r/26|0,n=r%26;t[r]=(e.words[i]&1<<n)>>>n}return t}(e);if(0===t.length)return new a(1);for(var r=this,i=0;i<t.length&&0===t[i];i++,r=r.sqr());if(++i<t.length)for(var n=r.sqr();i<t.length;i++,n=n.sqr())0!==t[i]&&(r=r.mul(n));return r},a.prototype.iushln=function(e){i("number"==typeof e&&e>=0);var t,r=e%26,n=(e-r)/26,a=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(t=0;t<this.length;t++){var f=this.words[t]&a,o=(0|this.words[t])-f<<r;this.words[t]=o|s,s=f>>>26-r}s&&(this.words[t]=s,this.length++)}if(0!==n){for(t=this.length-1;t>=0;t--)this.words[t+n]=this.words[t];for(t=0;t<n;t++)this.words[t]=0;this.length+=n}return this.strip()},a.prototype.ishln=function(e){return i(0===this.negative),this.iushln(e)},a.prototype.iushrn=function(e,t,r){var n;i("number"==typeof e&&e>=0),n=t?(t-t%26)/26:0;var a=e%26,s=Math.min((e-a)/26,this.length),f=67108863^67108863>>>a<<a,o=r;if(n-=s,n=Math.max(0,n),o){for(var c=0;c<s;c++)o.words[c]=this.words[c];o.length=s}if(0===s);else if(this.length>s)for(this.length-=s,c=0;c<this.length;c++)this.words[c]=this.words[c+s];else this.words[0]=0,this.length=1;var d=0;for(c=this.length-1;c>=0&&(0!==d||c>=n);c--){var u=0|this.words[c];this.words[c]=d<<26-a|u>>>a,d=u&f}return o&&0!==d&&(o.words[o.length++]=d),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},a.prototype.ishrn=function(e,t,r){return i(0===this.negative),this.iushrn(e,t,r)},a.prototype.shln=function(e){return this.clone().ishln(e)},a.prototype.ushln=function(e){return this.clone().iushln(e)},a.prototype.shrn=function(e){return this.clone().ishrn(e)},a.prototype.ushrn=function(e){return this.clone().iushrn(e)},a.prototype.testn=function(e){i("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,n=1<<t;return!(this.length<=r)&&!!(this.words[r]&n)},a.prototype.imaskn=function(e){i("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(i(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var n=67108863^67108863>>>t<<t;this.words[this.length-1]&=n}return this.strip()},a.prototype.maskn=function(e){return this.clone().imaskn(e)},a.prototype.iaddn=function(e){return i("number"==typeof e),i(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},a.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},a.prototype.isubn=function(e){if(i("number"==typeof e),i(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},a.prototype.addn=function(e){return this.clone().iaddn(e)},a.prototype.subn=function(e){return this.clone().isubn(e)},a.prototype.iabs=function(){return this.negative=0,this},a.prototype.abs=function(){return this.clone().iabs()},a.prototype._ishlnsubmul=function(e,t,r){var n,a,s=e.length+r;this._expand(s);var f=0;for(n=0;n<e.length;n++){a=(0|this.words[n+r])+f;var o=(0|e.words[n])*t;f=((a-=67108863&o)>>26)-(o/67108864|0),this.words[n+r]=67108863&a}for(;n<this.length-r;n++)f=(a=(0|this.words[n+r])+f)>>26,this.words[n+r]=67108863&a;if(0===f)return this.strip();for(i(-1===f),f=0,n=0;n<this.length;n++)f=(a=-(0|this.words[n])+f)>>26,this.words[n]=67108863&a;return this.negative=1,this.strip()},a.prototype._wordDiv=function(e,t){var r=(this.length,e.length),i=this.clone(),n=e,s=0|n.words[n.length-1];0!==(r=26-this._countBits(s))&&(n=n.ushln(r),i.iushln(r),s=0|n.words[n.length-1]);var f,o=i.length-n.length;if("mod"!==t){(f=new a(null)).length=o+1,f.words=new Array(f.length);for(var c=0;c<f.length;c++)f.words[c]=0}var d=i.clone()._ishlnsubmul(n,1,o);0===d.negative&&(i=d,f&&(f.words[o]=1));for(var u=o-1;u>=0;u--){var h=67108864*(0|i.words[n.length+u])+(0|i.words[n.length+u-1]);for(h=Math.min(h/s|0,67108863),i._ishlnsubmul(n,h,u);0!==i.negative;)h--,i.negative=0,i._ishlnsubmul(n,1,u),i.isZero()||(i.negative^=1);f&&(f.words[u]=h)}return f&&f.strip(),i.strip(),"div"!==t&&0!==r&&i.iushrn(r),{div:f||null,mod:i}},a.prototype.divmod=function(e,t,r){return i(!e.isZero()),this.isZero()?{div:new a(0),mod:new a(0)}:0!==this.negative&&0===e.negative?(f=this.neg().divmod(e,t),"mod"!==t&&(n=f.div.neg()),"div"!==t&&(s=f.mod.neg(),r&&0!==s.negative&&s.iadd(e)),{div:n,mod:s}):0===this.negative&&0!==e.negative?(f=this.divmod(e.neg(),t),"mod"!==t&&(n=f.div.neg()),{div:n,mod:f.mod}):0!=(this.negative&e.negative)?(f=this.neg().divmod(e.neg(),t),"div"!==t&&(s=f.mod.neg(),r&&0!==s.negative&&s.isub(e)),{div:f.div,mod:s}):e.length>this.length||this.cmp(e)<0?{div:new a(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new a(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new a(this.modn(e.words[0]))}:this._wordDiv(e,t);var n,s,f},a.prototype.div=function(e){return this.divmod(e,"div",!1).div},a.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},a.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},a.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,i=e.ushrn(1),n=e.andln(1),a=r.cmp(i);return a<0||1===n&&0===a?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},a.prototype.modn=function(e){i(e<=67108863);for(var t=(1<<26)%e,r=0,n=this.length-1;n>=0;n--)r=(t*r+(0|this.words[n]))%e;return r},a.prototype.idivn=function(e){i(e<=67108863);for(var t=0,r=this.length-1;r>=0;r--){var n=(0|this.words[r])+67108864*t;this.words[r]=n/e|0,t=n%e}return this.strip()},a.prototype.divn=function(e){return this.clone().idivn(e)},a.prototype.egcd=function(e){i(0===e.negative),i(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var n=new a(1),s=new a(0),f=new a(0),o=new a(1),c=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++c;for(var d=r.clone(),u=t.clone();!t.isZero();){for(var h=0,l=1;0==(t.words[0]&l)&&h<26;++h,l<<=1);if(h>0)for(t.iushrn(h);h-- >0;)(n.isOdd()||s.isOdd())&&(n.iadd(d),s.isub(u)),n.iushrn(1),s.iushrn(1);for(var b=0,p=1;0==(r.words[0]&p)&&b<26;++b,p<<=1);if(b>0)for(r.iushrn(b);b-- >0;)(f.isOdd()||o.isOdd())&&(f.iadd(d),o.isub(u)),f.iushrn(1),o.iushrn(1);t.cmp(r)>=0?(t.isub(r),n.isub(f),s.isub(o)):(r.isub(t),f.isub(n),o.isub(s))}return{a:f,b:o,gcd:r.iushln(c)}},a.prototype._invmp=function(e){i(0===e.negative),i(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var n,s=new a(1),f=new a(0),o=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,d=1;0==(t.words[0]&d)&&c<26;++c,d<<=1);if(c>0)for(t.iushrn(c);c-- >0;)s.isOdd()&&s.iadd(o),s.iushrn(1);for(var u=0,h=1;0==(r.words[0]&h)&&u<26;++u,h<<=1);if(u>0)for(r.iushrn(u);u-- >0;)f.isOdd()&&f.iadd(o),f.iushrn(1);t.cmp(r)>=0?(t.isub(r),s.isub(f)):(r.isub(t),f.isub(s))}return(n=0===t.cmpn(1)?s:f).cmpn(0)<0&&n.iadd(e),n},a.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var i=0;t.isEven()&&r.isEven();i++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=t.cmp(r);if(n<0){var a=t;t=r,r=a}else if(0===n||0===r.cmpn(1))break;t.isub(r)}return r.iushln(i)},a.prototype.invm=function(e){return this.egcd(e).a.umod(e)},a.prototype.isEven=function(){return 0==(1&this.words[0])},a.prototype.isOdd=function(){return 1==(1&this.words[0])},a.prototype.andln=function(e){return this.words[0]&e},a.prototype.bincn=function(e){i("number"==typeof e);var t=e%26,r=(e-t)/26,n=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=n,this;for(var a=n,s=r;0!==a&&s<this.length;s++){var f=0|this.words[s];a=(f+=a)>>>26,f&=67108863,this.words[s]=f}return 0!==a&&(this.words[s]=a,this.length++),this},a.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},a.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)t=1;else{r&&(e=-e),i(e<=67108863,"Number is too big");var n=0|this.words[0];t=n===e?0:n<e?-1:1}return 0!==this.negative?0|-t:t},a.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},a.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|e.words[r];if(i!==n){i<n?t=-1:i>n&&(t=1);break}}return t},a.prototype.gtn=function(e){return 1===this.cmpn(e)},a.prototype.gt=function(e){return 1===this.cmp(e)},a.prototype.gten=function(e){return this.cmpn(e)>=0},a.prototype.gte=function(e){return this.cmp(e)>=0},a.prototype.ltn=function(e){return-1===this.cmpn(e)},a.prototype.lt=function(e){return-1===this.cmp(e)},a.prototype.lten=function(e){return this.cmpn(e)<=0},a.prototype.lte=function(e){return this.cmp(e)<=0},a.prototype.eqn=function(e){return 0===this.cmpn(e)},a.prototype.eq=function(e){return 0===this.cmp(e)},a.red=function(e){return new M(e)},a.prototype.toRed=function(e){return i(!this.red,"Already a number in reduction context"),i(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},a.prototype.fromRed=function(){return i(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},a.prototype._forceRed=function(e){return this.red=e,this},a.prototype.forceRed=function(e){return i(!this.red,"Already a number in reduction context"),this._forceRed(e)},a.prototype.redAdd=function(e){return i(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},a.prototype.redIAdd=function(e){return i(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},a.prototype.redSub=function(e){return i(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},a.prototype.redISub=function(e){return i(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},a.prototype.redShl=function(e){return i(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},a.prototype.redMul=function(e){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},a.prototype.redIMul=function(e){return i(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},a.prototype.redSqr=function(){return i(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return i(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},a.prototype.redSqrt=function(){return i(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return i(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},a.prototype.redNeg=function(){return i(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(e){return i(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var y={k256:null,p224:null,p192:null,p25519:null};function v(e,t){this.name=e,this.p=new a(t,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function m(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function g(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function T(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function M(e){if("string"==typeof e){var t=a._prime(e);this.m=t.p,this.prime=t}else i(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function S(e){M.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var e=new a(null);return e.words=new Array(Math.ceil(this.n/13)),e},v.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var i=t<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):r.strip(),r},v.prototype.split=function(e,t){e.iushrn(this.n,0,t)},v.prototype.imulK=function(e){return e.imul(this.k)},n(m,v),m.prototype.split=function(e,t){for(var r=Math.min(e.length,9),i=0;i<r;i++)t.words[i]=e.words[i];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var n=e.words[9];for(t.words[t.length++]=4194303&n,i=10;i<e.length;i++){var a=0|e.words[i];e.words[i-10]=(4194303&a)<<4|n>>>22,n=a}n>>>=22,e.words[i-10]=n,0===n&&e.length>10?e.length-=10:e.length-=9},m.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var i=0|e.words[r];t+=977*i,e.words[r]=67108863&t,t=64*i+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},n(g,v),n(w,v),n(T,v),T.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var i=19*(0|e.words[r])+t,n=67108863&i;i>>>=26,e.words[r]=n,t=i}return 0!==t&&(e.words[e.length++]=t),e},a._prime=function(e){if(y[e])return y[e];var t;if("k256"===e)t=new m;else if("p224"===e)t=new g;else if("p192"===e)t=new w;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new T}return y[e]=t,t},M.prototype._verify1=function(e){i(0===e.negative,"red works only with positives"),i(e.red,"red works only with red numbers")},M.prototype._verify2=function(e,t){i(0==(e.negative|t.negative),"red works only with positives"),i(e.red&&e.red===t.red,"red works only with red numbers")},M.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},M.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},M.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},M.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},M.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},M.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},M.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},M.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},M.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},M.prototype.isqr=function(e){return this.imul(e,e.clone())},M.prototype.sqr=function(e){return this.mul(e,e)},M.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(i(t%2==1),3===t){var r=this.m.add(new a(1)).iushrn(2);return this.pow(e,r)}for(var n=this.m.subn(1),s=0;!n.isZero()&&0===n.andln(1);)s++,n.iushrn(1);i(!n.isZero());var f=new a(1).toRed(this),o=f.redNeg(),c=this.m.subn(1).iushrn(1),d=this.m.bitLength();for(d=new a(2*d*d).toRed(this);0!==this.pow(d,c).cmp(o);)d.redIAdd(o);for(var u=this.pow(d,n),h=this.pow(e,n.addn(1).iushrn(1)),l=this.pow(e,n),b=s;0!==l.cmp(f);){for(var p=l,y=0;0!==p.cmp(f);y++)p=p.redSqr();i(y<b);var v=this.pow(u,new a(1).iushln(b-y-1));h=h.redMul(v),u=v.redSqr(),l=l.redMul(u),b=y}return h},M.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},M.prototype.pow=function(e,t){if(t.isZero())return new a(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new a(1).toRed(this),r[1]=e;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],e);var n=r[0],s=0,f=0,o=t.bitLength()%26;for(0===o&&(o=26),i=t.length-1;i>=0;i--){for(var c=t.words[i],d=o-1;d>=0;d--){var u=c>>d&1;n!==r[0]&&(n=this.sqr(n)),0!==u||0!==s?(s<<=1,s|=u,(4===++f||0===i&&0===d)&&(n=this.mul(n,r[s]),f=0,s=0)):f=0}o=26}return n},M.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},M.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},a.mont=function(e){return new S(e)},n(S,M),S.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},S.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},S.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),a=n;return n.cmp(this.m)>=0?a=n.isub(this.m):n.cmpn(0)<0&&(a=n.iadd(this.m)),a._forceRed(this)},S.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new a(0)._forceRed(this);var r=e.mul(t),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),s=n;return n.cmp(this.m)>=0?s=n.isub(this.m):n.cmpn(0)<0&&(s=n.iadd(this.m)),s._forceRed(this)},S.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}).call(this,r(34)(e))},function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},function(e,t){function r(e,t,r,i,n,a,s){try{var f=e[a](s),o=f.value}catch(e){return void r(e)}f.done?t(o):Promise.resolve(o).then(i,n)}e.exports=function(e){return function(){var t=this,i=arguments;return new Promise(function(n,a){var s=e.apply(t,i);function f(e){r(s,n,a,f,o,"next",e)}function o(e){r(s,n,a,f,o,"throw",e)}f(void 0)})}}},function(e,t,r){"use strict";var i=r(10),n=r(12);function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=a,a.prototype.update=function(e,t){if(e=i.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=i.join32(e,0,e.length-r,this.endian);for(var n=0;n<e.length;n+=this._delta32)this._update(e,n,n+this._delta32)}return this},a.prototype.digest=function(e){return this.update(this._pad()),n(null===this.pending),this._digest(e)},a.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,i=new Array(r+this.padLength);i[0]=128;for(var n=1;n<r;n++)i[n]=0;if(e<<=3,"big"===this.endian){for(var a=8;a<this.padLength;a++)i[n++]=0;i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=e>>>24&255,i[n++]=e>>>16&255,i[n++]=e>>>8&255,i[n++]=255&e}else for(i[n++]=255&e,i[n++]=e>>>8&255,i[n++]=e>>>16&255,i[n++]=e>>>24&255,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,a=8;a<this.padLength;a++)i[n++]=0;return i}},function(e,t,r){var i=t;i.utils=r(10),i.common=r(14),i.sha=r(43),i.ripemd=r(47),i.hmac=r(48),i.sha1=i.sha.sha1,i.sha256=i.sha.sha256,i.sha224=i.sha.sha224,i.sha384=i.sha.sha384,i.sha512=i.sha.sha512,i.ripemd160=i.ripemd.ripemd160},function(e,t,r){"use strict";var i=t;i.base=r(38),i.short=r(39),i.mont=r(40),i.edwards=r(41)},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){"use strict";(function(t){var i=r(9),n=r(72),a={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var f,o={adapter:("undefined"!=typeof XMLHttpRequest?f=r(26):void 0!==t&&(f=r(26)),f),transformRequest:[function(e,t){return n(t,"Content-Type"),i.isFormData(e)||i.isArrayBuffer(e)||i.isBuffer(e)||i.isStream(e)||i.isFile(e)||i.isBlob(e)?e:i.isArrayBufferView(e)?e.buffer:i.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):i.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};o.headers={common:{Accept:"application/json, text/plain, */*"}},i.forEach(["delete","get","head"],function(e){o.headers[e]={}}),i.forEach(["post","put","patch"],function(e){o.headers[e]=i.merge(a)}),e.exports=o}).call(this,r(71))},function(e,t,r){"use strict";var i=t;function n(e){return 1===e.length?"0"+e:e}function a(e){for(var t="",r=0;r<e.length;r++)t+=n(e[r].toString(16));return t}i.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var i=0;i<e.length;i++)r[i]=0|e[i];return r}if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16));else for(i=0;i<e.length;i++){var n=e.charCodeAt(i),a=n>>8,s=255&n;a?r.push(a,s):r.push(s)}return r},i.zero2=n,i.toHex=a,i.encode=function(e,t){return"hex"===t?a(e):e}},function(e,t,r){"use strict";var i=r(10).rotr32;function n(e,t,r){return e&t^~e&r}function a(e,t,r){return e&t^e&r^t&r}function s(e,t,r){return e^t^r}t.ft_1=function(e,t,r,i){return 0===e?n(t,r,i):1===e||3===e?s(t,r,i):2===e?a(t,r,i):void 0},t.ch32=n,t.maj32=a,t.p32=s,t.s0_256=function(e){return i(e,2)^i(e,13)^i(e,22)},t.s1_256=function(e){return i(e,6)^i(e,11)^i(e,25)},t.g0_256=function(e){return i(e,7)^i(e,18)^e>>>3},t.g1_256=function(e){return i(e,17)^i(e,19)^e>>>10}},function(e,t,r){"use strict";var i=r(10),n=r(14),a=r(20),s=r(12),f=i.sum32,o=i.sum32_4,c=i.sum32_5,d=a.ch32,u=a.maj32,h=a.s0_256,l=a.s1_256,b=a.g0_256,p=a.g1_256,y=n.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function m(){if(!(this instanceof m))return new m;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}i.inherits(m,y),e.exports=m,m.blockSize=512,m.outSize=256,m.hmacStrength=192,m.padLength=64,m.prototype._update=function(e,t){for(var r=this.W,i=0;i<16;i++)r[i]=e[t+i];for(;i<r.length;i++)r[i]=o(p(r[i-2]),r[i-7],b(r[i-15]),r[i-16]);var n=this.h[0],a=this.h[1],y=this.h[2],v=this.h[3],m=this.h[4],g=this.h[5],w=this.h[6],T=this.h[7];for(s(this.k.length===r.length),i=0;i<r.length;i++){var M=c(T,l(m),d(m,g,w),this.k[i],r[i]),S=f(h(n),u(n,a,y));T=w,w=g,g=m,m=f(v,M),v=y,y=a,a=n,n=f(M,S)}this.h[0]=f(this.h[0],n),this.h[1]=f(this.h[1],a),this.h[2]=f(this.h[2],y),this.h[3]=f(this.h[3],v),this.h[4]=f(this.h[4],m),this.h[5]=f(this.h[5],g),this.h[6]=f(this.h[6],w),this.h[7]=f(this.h[7],T)},m.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(e,t,r){"use strict";var i=r(10),n=r(14),a=r(12),s=i.rotr64_hi,f=i.rotr64_lo,o=i.shr64_hi,c=i.shr64_lo,d=i.sum64,u=i.sum64_hi,h=i.sum64_lo,l=i.sum64_4_hi,b=i.sum64_4_lo,p=i.sum64_5_hi,y=i.sum64_5_lo,v=n.BlockHash,m=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function g(){if(!(this instanceof g))return new g;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=m,this.W=new Array(160)}function w(e,t,r,i,n){var a=e&r^~e&n;return a<0&&(a+=4294967296),a}function T(e,t,r,i,n,a){var s=t&i^~t&a;return s<0&&(s+=4294967296),s}function M(e,t,r,i,n){var a=e&r^e&n^r&n;return a<0&&(a+=4294967296),a}function S(e,t,r,i,n,a){var s=t&i^t&a^i&a;return s<0&&(s+=4294967296),s}function A(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function _(e,t){var r=f(e,t,28)^f(t,e,2)^f(t,e,7);return r<0&&(r+=4294967296),r}function E(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function U(e,t){var r=f(e,t,14)^f(e,t,18)^f(t,e,9);return r<0&&(r+=4294967296),r}function x(e,t){var r=s(e,t,1)^s(e,t,8)^o(e,t,7);return r<0&&(r+=4294967296),r}function I(e,t){var r=f(e,t,1)^f(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function R(e,t){var r=s(e,t,19)^s(t,e,29)^o(e,t,6);return r<0&&(r+=4294967296),r}function O(e,t){var r=f(e,t,19)^f(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}i.inherits(g,v),e.exports=g,g.blockSize=1024,g.outSize=512,g.hmacStrength=192,g.padLength=128,g.prototype._prepareBlock=function(e,t){for(var r=this.W,i=0;i<32;i++)r[i]=e[t+i];for(;i<r.length;i+=2){var n=R(r[i-4],r[i-3]),a=O(r[i-4],r[i-3]),s=r[i-14],f=r[i-13],o=x(r[i-30],r[i-29]),c=I(r[i-30],r[i-29]),d=r[i-32],u=r[i-31];r[i]=l(n,a,s,f,o,c,d,u),r[i+1]=b(n,a,s,f,o,c,d,u)}},g.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,i=this.h[0],n=this.h[1],s=this.h[2],f=this.h[3],o=this.h[4],c=this.h[5],l=this.h[6],b=this.h[7],v=this.h[8],m=this.h[9],g=this.h[10],x=this.h[11],I=this.h[12],R=this.h[13],O=this.h[14],N=this.h[15];a(this.k.length===r.length);for(var k=0;k<r.length;k+=2){var C=O,z=N,B=E(v,m),P=U(v,m),L=w(v,m,g,x,I),D=T(v,m,g,x,I,R),q=this.k[k],j=this.k[k+1],V=r[k],F=r[k+1],H=p(C,z,B,P,L,D,q,j,V,F),J=y(C,z,B,P,L,D,q,j,V,F);C=A(i,n),z=_(i,n),B=M(i,n,s,f,o),P=S(i,n,s,f,o,c);var X=u(C,z,B,P),K=h(C,z,B,P);O=I,N=R,I=g,R=x,g=v,x=m,v=u(l,b,H,J),m=h(b,b,H,J),l=o,b=c,o=s,c=f,s=i,f=n,i=u(H,J,X,K),n=h(H,J,X,K)}d(this.h,0,i,n),d(this.h,2,s,f),d(this.h,4,o,c),d(this.h,6,l,b),d(this.h,8,v,m),d(this.h,10,g,x),d(this.h,12,I,R),d(this.h,14,O,N)},g.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){(function(e){!function(e){function t(e){if("utf-8"!==(e=void 0===e?"utf-8":e))throw new RangeError("Failed to construct 'TextEncoder': The encoding label provided ('"+e+"') is invalid.")}function r(e,t){if(t=void 0===t?{fatal:!1}:t,"utf-8"!==(e=void 0===e?"utf-8":e))throw new RangeError("Failed to construct 'TextDecoder': The encoding label provided ('"+e+"') is invalid.");if(t.fatal)throw Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}if(e.TextEncoder&&e.TextDecoder)return!1;Object.defineProperty(t.prototype,"encoding",{value:"utf-8"}),t.prototype.encode=function(e,t){if((t=void 0===t?{stream:!1}:t).stream)throw Error("Failed to encode: the 'stream' option is unsupported.");t=0;for(var r=e.length,i=0,n=Math.max(32,r+(r>>1)+7),a=new Uint8Array(n>>3<<3);t<r;){var s=e.charCodeAt(t++);if(55296<=s&&56319>=s){if(t<r){var f=e.charCodeAt(t);56320==(64512&f)&&(++t,s=((1023&s)<<10)+(1023&f)+65536)}if(55296<=s&&56319>=s)continue}if(i+4>a.length&&(n+=8,n=(n*=1+t/e.length*2)>>3<<3,(f=new Uint8Array(n)).set(a),a=f),0==(4294967168&s))a[i++]=s;else{if(0==(4294965248&s))a[i++]=s>>6&31|192;else if(0==(4294901760&s))a[i++]=s>>12&15|224,a[i++]=s>>6&63|128;else{if(0!=(4292870144&s))continue;a[i++]=s>>18&7|240,a[i++]=s>>12&63|128,a[i++]=s>>6&63|128}a[i++]=63&s|128}}return a.slice(0,i)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(e,t){if((t=void 0===t?{stream:!1}:t).stream)throw Error("Failed to decode: the 'stream' option is unsupported.");t=0;for(var r=(e=new Uint8Array(e)).length,i=[];t<r;){var n=e[t++];if(0===n)break;if(0==(128&n))i.push(n);else if(192==(224&n)){var a=63&e[t++];i.push((31&n)<<6|a)}else if(224==(240&n)){a=63&e[t++];var s=63&e[t++];i.push((31&n)<<12|a<<6|s)}else if(240==(248&n)){65535<(n=(7&n)<<18|(a=63&e[t++])<<12|(s=63&e[t++])<<6|63&e[t++])&&(n-=65536,i.push(n>>>10&1023|55296),n=56320|1023&n),i.push(n)}}return String.fromCharCode.apply(null,i)},e.TextEncoder=t,e.TextDecoder=r}("undefined"!=typeof window?window:void 0!==e?e:this)}).call(this,r(23))},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),i=0;i<r.length;i++)r[i]=arguments[i];return e.apply(t,r)}}},function(e,t,r){"use strict";var i=r(9),n=r(73),a=r(75),s=r(76),f=r(77),o=r(27),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||r(78);e.exports=function(e){return new Promise(function(t,d){var u=e.data,h=e.headers;i.isFormData(u)&&delete h["Content-Type"];var l=new XMLHttpRequest,b="onreadystatechange",p=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in l||f(e.url)||(l=new window.XDomainRequest,b="onload",p=!0,l.onprogress=function(){},l.ontimeout=function(){}),e.auth){var y=e.auth.username||"",v=e.auth.password||"";h.Authorization="Basic "+c(y+":"+v)}if(l.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,l[b]=function(){if(l&&(4===l.readyState||p)&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in l?s(l.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?l.response:l.responseText,status:1223===l.status?204:l.status,statusText:1223===l.status?"No Content":l.statusText,headers:r,config:e,request:l};n(t,d,i),l=null}},l.onerror=function(){d(o("Network Error",e,null,l)),l=null},l.ontimeout=function(){d(o("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",l)),l=null},i.isStandardBrowserEnv()){var m=r(79),g=(e.withCredentials||f(e.url))&&e.xsrfCookieName?m.read(e.xsrfCookieName):void 0;g&&(h[e.xsrfHeaderName]=g)}if("setRequestHeader"in l&&i.forEach(h,function(e,t){void 0===u&&"content-type"===t.toLowerCase()?delete h[t]:l.setRequestHeader(t,e)}),e.withCredentials&&(l.withCredentials=!0),e.responseType)try{l.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){l&&(l.abort(),d(e),l=null)}),void 0===u&&(u=null),l.send(u)})}},function(e,t,r){"use strict";var i=r(74);e.exports=function(e,t,r,n,a){var s=new Error(e);return i(s,t,r,n,a)}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";function i(e){this.message=e}i.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},i.prototype.__CANCEL__=!0,e.exports=i},function(e,t,r){e.exports=r(68)},function(e,t,r){e.exports=r(87)},function(e){e.exports={_args:[["elliptic@6.4.1","/Users/bolshchikov/Documents/src/github.com/orbs-network/orbs-client-sdk-javascript"]],_from:"elliptic@6.4.1",_id:"elliptic@6.4.1",_inBundle:!1,_integrity:"sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==",_location:"/elliptic",_phantomChildren:{},_requested:{type:"version",registry:!0,raw:"elliptic@6.4.1",name:"elliptic",escapedName:"elliptic",rawSpec:"6.4.1",saveSpec:null,fetchSpec:"6.4.1"},_requiredBy:["/","/browserify-sign","/create-ecdh"],_resolved:"https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz",_spec:"6.4.1",_where:"/Users/bolshchikov/Documents/src/github.com/orbs-network/orbs-client-sdk-javascript",author:{name:"Fedor Indutny",email:"fedor@indutny.com"},bugs:{url:"https://github.com/indutny/elliptic/issues"},dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},description:"EC cryptography",devDependencies:{brfs:"^1.4.3",coveralls:"^2.11.3",grunt:"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2",istanbul:"^0.4.2",jscs:"^2.9.0",jshint:"^2.6.0",mocha:"^2.1.0"},files:["lib"],homepage:"https://github.com/indutny/elliptic",keywords:["EC","Elliptic","curve","Cryptography"],license:"MIT",main:"lib/elliptic.js",name:"elliptic",repository:{type:"git",url:"git+ssh://git@github.com/indutny/elliptic.git"},scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",test:"npm run lint && npm run unit",unit:"istanbul test _mocha --reporter=spec test/index.js",version:"grunt dist && git add dist/"},version:"6.4.1"}},function(e,t,r){"use strict";var i=t,n=r(11),a=r(12),s=r(19);i.assert=a,i.toArray=s.toArray,i.zero2=s.zero2,i.toHex=s.toHex,i.encode=s.encode,i.getNAF=function(e,t){for(var r=[],i=1<<t+1,n=e.clone();n.cmpn(1)>=0;){var a;if(n.isOdd()){var s=n.andln(i-1);a=s>(i>>1)-1?(i>>1)-s:s,n.isubn(a)}else a=0;r.push(a);for(var f=0!==n.cmpn(0)&&0===n.andln(i-1)?t+1:1,o=1;o<f;o++)r.push(0);n.iushrn(f)}return r},i.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var i=0,n=0;e.cmpn(-i)>0||t.cmpn(-n)>0;){var a,s,f,o=e.andln(3)+i&3,c=t.andln(3)+n&3;3===o&&(o=-1),3===c&&(c=-1),a=0==(1&o)?0:3!=(f=e.andln(7)+i&7)&&5!==f||2!==c?o:-o,r[0].push(a),s=0==(1&c)?0:3!=(f=t.andln(7)+n&7)&&5!==f||2!==o?c:-c,r[1].push(s),2*i===a+1&&(i=1-i),2*n===s+1&&(n=1-n),e.iushrn(1),t.iushrn(1)}return r},i.cachedProperty=function(e,t,r){var i="_"+t;e.prototype[t]=function(){return void 0!==this[i]?this[i]:this[i]=r.call(this)}},i.parseBytes=function(e){return"string"==typeof e?i.toArray(e,"hex"):e},i.intFromLE=function(e){return new n(e,"hex","le")}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){},function(e,t,r){var i;function n(e){this.rand=e}if(e.exports=function(e){return i||(i=new n(null)),i.generate(e)},e.exports.Rand=n,n.prototype.generate=function(e){return this._rand(e)},n.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),r=0;r<t.length;r++)t[r]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?n.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?n.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(n.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var a=r(37);if("function"!=typeof a.randomBytes)throw new Error("Not supported");n.prototype._rand=function(e){return a.randomBytes(e)}}catch(e){}},function(e,t){},function(e,t,r){"use strict";var i=r(11),n=r(4).utils,a=n.getNAF,s=n.getJSF,f=n.assert;function o(e,t){this.type=e,this.p=new i(t.p,16),this.red=t.prime?i.red(t.prime):i.mont(this.p),this.zero=new i(0).toRed(this.red),this.one=new i(1).toRed(this.red),this.two=new i(2).toRed(this.red),this.n=t.n&&new i(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function c(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=o,o.prototype.point=function(){throw new Error("Not implemented")},o.prototype.validate=function(){throw new Error("Not implemented")},o.prototype._fixedNafMul=function(e,t){f(e.precomputed);var r=e._getDoubles(),i=a(t,1),n=(1<<r.step+1)-(r.step%2==0?2:1);n/=3;for(var s=[],o=0;o<i.length;o+=r.step){var c=0;for(t=o+r.step-1;t>=o;t--)c=(c<<1)+i[t];s.push(c)}for(var d=this.jpoint(null,null,null),u=this.jpoint(null,null,null),h=n;h>0;h--){for(o=0;o<s.length;o++){(c=s[o])===h?u=u.mixedAdd(r.points[o]):c===-h&&(u=u.mixedAdd(r.points[o].neg()))}d=d.add(u)}return d.toP()},o.prototype._wnafMul=function(e,t){var r=4,i=e._getNAFPoints(r);r=i.wnd;for(var n=i.points,s=a(t,r),o=this.jpoint(null,null,null),c=s.length-1;c>=0;c--){for(t=0;c>=0&&0===s[c];c--)t++;if(c>=0&&t++,o=o.dblp(t),c<0)break;var d=s[c];f(0!==d),o="affine"===e.type?d>0?o.mixedAdd(n[d-1>>1]):o.mixedAdd(n[-d-1>>1].neg()):d>0?o.add(n[d-1>>1]):o.add(n[-d-1>>1].neg())}return"affine"===e.type?o.toP():o},o.prototype._wnafMulAdd=function(e,t,r,i,n){for(var f=this._wnafT1,o=this._wnafT2,c=this._wnafT3,d=0,u=0;u<i;u++){var h=(_=t[u])._getNAFPoints(e);f[u]=h.wnd,o[u]=h.points}for(u=i-1;u>=1;u-=2){var l=u-1,b=u;if(1===f[l]&&1===f[b]){var p=[t[l],null,null,t[b]];0===t[l].y.cmp(t[b].y)?(p[1]=t[l].add(t[b]),p[2]=t[l].toJ().mixedAdd(t[b].neg())):0===t[l].y.cmp(t[b].y.redNeg())?(p[1]=t[l].toJ().mixedAdd(t[b]),p[2]=t[l].add(t[b].neg())):(p[1]=t[l].toJ().mixedAdd(t[b]),p[2]=t[l].toJ().mixedAdd(t[b].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],v=s(r[l],r[b]);d=Math.max(v[0].length,d),c[l]=new Array(d),c[b]=new Array(d);for(var m=0;m<d;m++){var g=0|v[0][m],w=0|v[1][m];c[l][m]=y[3*(g+1)+(w+1)],c[b][m]=0,o[l]=p}}else c[l]=a(r[l],f[l]),c[b]=a(r[b],f[b]),d=Math.max(c[l].length,d),d=Math.max(c[b].length,d)}var T=this.jpoint(null,null,null),M=this._wnafT4;for(u=d;u>=0;u--){for(var S=0;u>=0;){var A=!0;for(m=0;m<i;m++)M[m]=0|c[m][u],0!==M[m]&&(A=!1);if(!A)break;S++,u--}if(u>=0&&S++,T=T.dblp(S),u<0)break;for(m=0;m<i;m++){var _,E=M[m];0!==E&&(E>0?_=o[m][E-1>>1]:E<0&&(_=o[m][-E-1>>1].neg()),T="affine"===_.type?T.mixedAdd(_):T.add(_))}}for(u=0;u<i;u++)o[u]=null;return n?T:T.toP()},o.BasePoint=c,c.prototype.eq=function(){throw new Error("Not implemented")},c.prototype.validate=function(){return this.curve.validate(this)},o.prototype.decodePoint=function(e,t){e=n.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?f(e[e.length-1]%2==0):7===e[0]&&f(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},c.prototype.encodeCompressed=function(e){return this.encode(e,!0)},c.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},c.prototype.encode=function(e,t){return n.encode(this._encode(t),e)},c.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},c.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},c.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],i=this,n=0;n<t;n+=e){for(var a=0;a<e;a++)i=i.dbl();r.push(i)}return{step:e,points:r}},c.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,i=1===r?null:this.dbl(),n=1;n<r;n++)t[n]=t[n-1].add(i);return{wnd:e,points:t}},c.prototype._getBeta=function(){return null},c.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}},function(e,t,r){"use strict";var i=r(16),n=r(4),a=r(11),s=r(17),f=i.base,o=n.utils.assert;function c(e){f.call(this,"short",e),this.a=new a(e.a,16).toRed(this.red),this.b=new a(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function d(e,t,r,i){f.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new a(t,16),this.y=new a(r,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function u(e,t,r,i){f.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===i?(this.x=this.curve.one,this.y=this.curve.one,this.z=new a(0)):(this.x=new a(t,16),this.y=new a(r,16),this.z=new a(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}s(c,f),e.exports=c,c.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new a(e.beta,16).toRed(this.red);else{var i=this._getEndoRoots(this.p);t=(t=i[0].cmp(i[1])<0?i[0]:i[1]).toRed(this.red)}if(e.lambda)r=new a(e.lambda,16);else{var n=this._getEndoRoots(this.n);0===this.g.mul(n[0]).x.cmp(this.g.x.redMul(t))?r=n[0]:(r=n[1],o(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map(function(e){return{a:new a(e.a,16),b:new a(e.b,16)}}):this._getEndoBasis(r)}}},c.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:a.mont(e),r=new a(2).toRed(t).redInvm(),i=r.redNeg(),n=new a(3).toRed(t).redNeg().redSqrt().redMul(r);return[i.redAdd(n).fromRed(),i.redSub(n).fromRed()]},c.prototype._getEndoBasis=function(e){for(var t,r,i,n,s,f,o,c,d,u=this.n.ushrn(Math.floor(this.n.bitLength()/2)),h=e,l=this.n.clone(),b=new a(1),p=new a(0),y=new a(0),v=new a(1),m=0;0!==h.cmpn(0);){var g=l.div(h);c=l.sub(g.mul(h)),d=y.sub(g.mul(b));var w=v.sub(g.mul(p));if(!i&&c.cmp(u)<0)t=o.neg(),r=b,i=c.neg(),n=d;else if(i&&2==++m)break;o=c,l=h,h=c,y=b,b=d,v=p,p=w}s=c.neg(),f=d;var T=i.sqr().add(n.sqr());return s.sqr().add(f.sqr()).cmp(T)>=0&&(s=t,f=r),i.negative&&(i=i.neg(),n=n.neg()),s.negative&&(s=s.neg(),f=f.neg()),[{a:i,b:n},{a:s,b:f}]},c.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],i=t[1],n=i.b.mul(e).divRound(this.n),a=r.b.neg().mul(e).divRound(this.n),s=n.mul(r.a),f=a.mul(i.a),o=n.mul(r.b),c=a.mul(i.b);return{k1:e.sub(s).sub(f),k2:o.add(c).neg()}},c.prototype.pointFromX=function(e,t){(e=new a(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),i=r.redSqrt();if(0!==i.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var n=i.fromRed().isOdd();return(t&&!n||!t&&n)&&(i=i.redNeg()),this.point(e,i)},c.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,i=this.a.redMul(t),n=t.redSqr().redMul(t).redIAdd(i).redIAdd(this.b);return 0===r.redSqr().redISub(n).cmpn(0)},c.prototype._endoWnafMulAdd=function(e,t,r){for(var i=this._endoWnafT1,n=this._endoWnafT2,a=0;a<e.length;a++){var s=this._endoSplit(t[a]),f=e[a],o=f._getBeta();s.k1.negative&&(s.k1.ineg(),f=f.neg(!0)),s.k2.negative&&(s.k2.ineg(),o=o.neg(!0)),i[2*a]=f,i[2*a+1]=o,n[2*a]=s.k1,n[2*a+1]=s.k2}for(var c=this._wnafMulAdd(1,i,n,2*a,r),d=0;d<2*a;d++)i[d]=null,n[d]=null;return c},s(d,f.BasePoint),c.prototype.point=function(e,t,r){return new d(this,e,t,r)},c.prototype.pointFromJSON=function(e,t){return d.fromJSON(this,e,t)},d.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,i=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(i)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(i)}}}return t}},d.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},d.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var i=e.point(t[0],t[1],r);if(!t[2])return i;function n(t){return e.point(t[0],t[1],r)}var a=t[2];return i.precomputed={beta:null,doubles:a.doubles&&{step:a.doubles.step,points:[i].concat(a.doubles.points.map(n))},naf:a.naf&&{wnd:a.naf.wnd,points:[i].concat(a.naf.points.map(n))}},i},d.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},d.prototype.isInfinity=function(){return this.inf},d.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),i=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,i)},d.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),i=e.redInvm(),n=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(i),a=n.redSqr().redISub(this.x.redAdd(this.x)),s=n.redMul(this.x.redSub(a)).redISub(this.y);return this.curve.point(a,s)},d.prototype.getX=function(){return this.x.fromRed()},d.prototype.getY=function(){return this.y.fromRed()},d.prototype.mul=function(e){return e=new a(e,16),this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},d.prototype.mulAdd=function(e,t,r){var i=[this,t],n=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(i,n):this.curve._wnafMulAdd(1,i,n,2)},d.prototype.jmulAdd=function(e,t,r){var i=[this,t],n=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(i,n,!0):this.curve._wnafMulAdd(1,i,n,2,!0)},d.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},d.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,i=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(i)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(i)}}}return t},d.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},s(u,f.BasePoint),c.prototype.jpoint=function(e,t,r){return new u(this,e,t,r)},u.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),i=this.y.redMul(t).redMul(e);return this.curve.point(r,i)},u.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},u.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),i=this.x.redMul(t),n=e.x.redMul(r),a=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(r.redMul(this.z)),f=i.redSub(n),o=a.redSub(s);if(0===f.cmpn(0))return 0!==o.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=f.redSqr(),d=c.redMul(f),u=i.redMul(c),h=o.redSqr().redIAdd(d).redISub(u).redISub(u),l=o.redMul(u.redISub(h)).redISub(a.redMul(d)),b=this.z.redMul(e.z).redMul(f);return this.curve.jpoint(h,l,b)},u.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,i=e.x.redMul(t),n=this.y,a=e.y.redMul(t).redMul(this.z),s=r.redSub(i),f=n.redSub(a);if(0===s.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var o=s.redSqr(),c=o.redMul(s),d=r.redMul(o),u=f.redSqr().redIAdd(c).redISub(d).redISub(d),h=f.redMul(d.redISub(u)).redISub(n.redMul(c)),l=this.z.redMul(s);return this.curve.jpoint(u,h,l)},u.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}var i=this.curve.a,n=this.curve.tinv,a=this.x,s=this.y,f=this.z,o=f.redSqr().redSqr(),c=s.redAdd(s);for(r=0;r<e;r++){var d=a.redSqr(),u=c.redSqr(),h=u.redSqr(),l=d.redAdd(d).redIAdd(d).redIAdd(i.redMul(o)),b=a.redMul(u),p=l.redSqr().redISub(b.redAdd(b)),y=b.redISub(p),v=l.redMul(y);v=v.redIAdd(v).redISub(h);var m=c.redMul(f);r+1<e&&(o=o.redMul(h)),a=p,f=m,c=v}return this.curve.jpoint(a,c.redMul(n),f)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},u.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var i=this.x.redSqr(),n=this.y.redSqr(),a=n.redSqr(),s=this.x.redAdd(n).redSqr().redISub(i).redISub(a);s=s.redIAdd(s);var f=i.redAdd(i).redIAdd(i),o=f.redSqr().redISub(s).redISub(s),c=a.redIAdd(a);c=(c=c.redIAdd(c)).redIAdd(c),e=o,t=f.redMul(s.redISub(o)).redISub(c),r=this.y.redAdd(this.y)}else{var d=this.x.redSqr(),u=this.y.redSqr(),h=u.redSqr(),l=this.x.redAdd(u).redSqr().redISub(d).redISub(h);l=l.redIAdd(l);var b=d.redAdd(d).redIAdd(d),p=b.redSqr(),y=h.redIAdd(h);y=(y=y.redIAdd(y)).redIAdd(y),e=p.redISub(l).redISub(l),t=b.redMul(l.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},u.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var i=this.x.redSqr(),n=this.y.redSqr(),a=n.redSqr(),s=this.x.redAdd(n).redSqr().redISub(i).redISub(a);s=s.redIAdd(s);var f=i.redAdd(i).redIAdd(i).redIAdd(this.curve.a),o=f.redSqr().redISub(s).redISub(s);e=o;var c=a.redIAdd(a);c=(c=c.redIAdd(c)).redIAdd(c),t=f.redMul(s.redISub(o)).redISub(c),r=this.y.redAdd(this.y)}else{var d=this.z.redSqr(),u=this.y.redSqr(),h=this.x.redMul(u),l=this.x.redSub(d).redMul(this.x.redAdd(d));l=l.redAdd(l).redIAdd(l);var b=h.redIAdd(h),p=(b=b.redIAdd(b)).redAdd(b);e=l.redSqr().redISub(p),r=this.y.redAdd(this.z).redSqr().redISub(u).redISub(d);var y=u.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=l.redMul(b.redISub(e)).redISub(y)}return this.curve.jpoint(e,t,r)},u.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,i=this.z,n=i.redSqr().redSqr(),a=t.redSqr(),s=r.redSqr(),f=a.redAdd(a).redIAdd(a).redIAdd(e.redMul(n)),o=t.redAdd(t),c=(o=o.redIAdd(o)).redMul(s),d=f.redSqr().redISub(c.redAdd(c)),u=c.redISub(d),h=s.redSqr();h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var l=f.redMul(u).redISub(h),b=r.redAdd(r).redMul(i);return this.curve.jpoint(d,l,b)},u.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),i=t.redSqr(),n=e.redAdd(e).redIAdd(e),a=n.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(i),f=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(a)).redSqr(),o=i.redIAdd(i);o=(o=(o=o.redIAdd(o)).redIAdd(o)).redIAdd(o);var c=n.redIAdd(s).redSqr().redISub(a).redISub(f).redISub(o),d=t.redMul(c);d=(d=d.redIAdd(d)).redIAdd(d);var u=this.x.redMul(f).redISub(d);u=(u=u.redIAdd(u)).redIAdd(u);var h=this.y.redMul(c.redMul(o.redISub(c)).redISub(s.redMul(f)));h=(h=(h=h.redIAdd(h)).redIAdd(h)).redIAdd(h);var l=this.z.redAdd(s).redSqr().redISub(r).redISub(f);return this.curve.jpoint(u,h,l)},u.prototype.mul=function(e,t){return e=new a(e,t),this.curve._wnafMul(this,e)},u.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var i=t.redMul(this.z),n=r.redMul(e.z);return 0===this.y.redMul(n).redISub(e.y.redMul(i)).cmpn(0)},u.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var i=e.clone(),n=this.curve.redN.redMul(t);;){if(i.iadd(this.curve.n),i.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(n),0===this.x.cmp(r))return!0}},u.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,r){"use strict";var i=r(16),n=r(11),a=r(17),s=i.base,f=r(4).utils;function o(e){s.call(this,"mont",e),this.a=new n(e.a,16).toRed(this.red),this.b=new n(e.b,16).toRed(this.red),this.i4=new n(4).toRed(this.red).redInvm(),this.two=new n(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function c(e,t,r){s.BasePoint.call(this,e,"projective"),null===t&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new n(t,16),this.z=new n(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}a(o,s),e.exports=o,o.prototype.validate=function(e){var t=e.normalize().x,r=t.redSqr(),i=r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);return 0===i.redSqrt().redSqr().cmp(i)},a(c,s.BasePoint),o.prototype.decodePoint=function(e,t){return this.point(f.toArray(e,t),1)},o.prototype.point=function(e,t){return new c(this,e,t)},o.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},c.prototype.precompute=function(){},c.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},c.fromJSON=function(e,t){return new c(e,t[0],t[1]||e.one)},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},c.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),r=e.redSub(t),i=e.redMul(t),n=r.redMul(t.redAdd(this.curve.a24.redMul(r)));return this.curve.point(i,n)},c.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.diffAdd=function(e,t){var r=this.x.redAdd(this.z),i=this.x.redSub(this.z),n=e.x.redAdd(e.z),a=e.x.redSub(e.z).redMul(r),s=n.redMul(i),f=t.z.redMul(a.redAdd(s).redSqr()),o=t.x.redMul(a.redISub(s).redSqr());return this.curve.point(f,o)},c.prototype.mul=function(e){for(var t=e.clone(),r=this,i=this.curve.point(null,null),n=[];0!==t.cmpn(0);t.iushrn(1))n.push(t.andln(1));for(var a=n.length-1;a>=0;a--)0===n[a]?(r=r.diffAdd(i,this),i=i.dbl()):(i=r.diffAdd(i,this),r=r.dbl());return i},c.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},c.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,r){"use strict";var i=r(16),n=r(4),a=r(11),s=r(17),f=i.base,o=n.utils.assert;function c(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,f.call(this,"edwards",e),this.a=new a(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new a(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new a(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),o(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function d(e,t,r,i,n){f.BasePoint.call(this,e,"projective"),null===t&&null===r&&null===i?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new a(t,16),this.y=new a(r,16),this.z=i?new a(i,16):this.curve.one,this.t=n&&new a(n,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}s(c,f),e.exports=c,c.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},c.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},c.prototype.jpoint=function(e,t,r,i){return this.point(e,t,r,i)},c.prototype.pointFromX=function(e,t){(e=new a(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),i=this.c2.redSub(this.a.redMul(r)),n=this.one.redSub(this.c2.redMul(this.d).redMul(r)),s=i.redMul(n.redInvm()),f=s.redSqrt();if(0!==f.redSqr().redSub(s).cmp(this.zero))throw new Error("invalid point");var o=f.fromRed().isOdd();return(t&&!o||!t&&o)&&(f=f.redNeg()),this.point(e,f)},c.prototype.pointFromY=function(e,t){(e=new a(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),i=r.redSub(this.c2),n=r.redMul(this.d).redMul(this.c2).redSub(this.a),s=i.redMul(n.redInvm());if(0===s.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var f=s.redSqrt();if(0!==f.redSqr().redSub(s).cmp(this.zero))throw new Error("invalid point");return f.fromRed().isOdd()!==t&&(f=f.redNeg()),this.point(f,e)},c.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),r=e.y.redSqr(),i=t.redMul(this.a).redAdd(r),n=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));return 0===i.cmp(n)},s(d,f.BasePoint),c.prototype.pointFromJSON=function(e){return d.fromJSON(this,e)},c.prototype.point=function(e,t,r,i){return new d(this,e,t,r,i)},d.fromJSON=function(e,t){return new d(e,t[0],t[1],t[2])},d.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},d.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},d.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var i=this.curve._mulA(e),n=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),a=i.redAdd(t),s=a.redSub(r),f=i.redSub(t),o=n.redMul(s),c=a.redMul(f),d=n.redMul(f),u=s.redMul(a);return this.curve.point(o,c,u,d)},d.prototype._projDbl=function(){var e,t,r,i=this.x.redAdd(this.y).redSqr(),n=this.x.redSqr(),a=this.y.redSqr();if(this.curve.twisted){var s=(c=this.curve._mulA(n)).redAdd(a);if(this.zOne)e=i.redSub(n).redSub(a).redMul(s.redSub(this.curve.two)),t=s.redMul(c.redSub(a)),r=s.redSqr().redSub(s).redSub(s);else{var f=this.z.redSqr(),o=s.redSub(f).redISub(f);e=i.redSub(n).redISub(a).redMul(o),t=s.redMul(c.redSub(a)),r=s.redMul(o)}}else{var c=n.redAdd(a);f=this.curve._mulC(this.z).redSqr(),o=c.redSub(f).redSub(f);e=this.curve._mulC(i.redISub(c)).redMul(o),t=this.curve._mulC(c).redMul(n.redISub(a)),r=c.redMul(o)}return this.curve.point(e,t,r)},d.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},d.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),r=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),i=this.t.redMul(this.curve.dd).redMul(e.t),n=this.z.redMul(e.z.redAdd(e.z)),a=r.redSub(t),s=n.redSub(i),f=n.redAdd(i),o=r.redAdd(t),c=a.redMul(s),d=f.redMul(o),u=a.redMul(o),h=s.redMul(f);return this.curve.point(c,d,h,u)},d.prototype._projAdd=function(e){var t,r,i=this.z.redMul(e.z),n=i.redSqr(),a=this.x.redMul(e.x),s=this.y.redMul(e.y),f=this.curve.d.redMul(a).redMul(s),o=n.redSub(f),c=n.redAdd(f),d=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(a).redISub(s),u=i.redMul(o).redMul(d);return this.curve.twisted?(t=i.redMul(c).redMul(s.redSub(this.curve._mulA(a))),r=o.redMul(c)):(t=i.redMul(c).redMul(s.redSub(a)),r=this.curve._mulC(o).redMul(c)),this.curve.point(u,t,r)},d.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},d.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},d.prototype.mulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!1)},d.prototype.jmulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!0)},d.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},d.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},d.prototype.getX=function(){return this.normalize(),this.x.fromRed()},d.prototype.getY=function(){return this.normalize(),this.y.fromRed()},d.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},d.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var r=e.clone(),i=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(i),0===this.x.cmp(t))return!0}},d.prototype.toP=d.prototype.normalize,d.prototype.mixedAdd=d.prototype.add},function(e,t,r){"use strict";var i,n=t,a=r(15),s=r(4),f=s.utils.assert;function o(e){"short"===e.type?this.curve=new s.curve.short(e):"edwards"===e.type?this.curve=new s.curve.edwards(e):this.curve=new s.curve.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,f(this.g.validate(),"Invalid curve"),f(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function c(e,t){Object.defineProperty(n,e,{configurable:!0,enumerable:!0,get:function(){var r=new o(t);return Object.defineProperty(n,e,{configurable:!0,enumerable:!0,value:r}),r}})}n.PresetCurve=o,c("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:a.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),c("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:a.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),c("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:a.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),c("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:a.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),c("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:a.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),c("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:a.sha256,gRed:!1,g:["9"]}),c("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:a.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{i=r(49)}catch(e){i=void 0}c("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:a.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",i]})},function(e,t,r){"use strict";t.sha1=r(44),t.sha224=r(45),t.sha256=r(21),t.sha384=r(46),t.sha512=r(22)},function(e,t,r){"use strict";var i=r(10),n=r(14),a=r(20),s=i.rotl32,f=i.sum32,o=i.sum32_5,c=a.ft_1,d=n.BlockHash,u=[1518500249,1859775393,2400959708,3395469782];function h(){if(!(this instanceof h))return new h;d.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}i.inherits(h,d),e.exports=h,h.blockSize=512,h.outSize=160,h.hmacStrength=80,h.padLength=64,h.prototype._update=function(e,t){for(var r=this.W,i=0;i<16;i++)r[i]=e[t+i];for(;i<r.length;i++)r[i]=s(r[i-3]^r[i-8]^r[i-14]^r[i-16],1);var n=this.h[0],a=this.h[1],d=this.h[2],h=this.h[3],l=this.h[4];for(i=0;i<r.length;i++){var b=~~(i/20),p=o(s(n,5),c(b,a,d,h),l,r[i],u[b]);l=h,h=d,d=s(a,30),a=n,n=p}this.h[0]=f(this.h[0],n),this.h[1]=f(this.h[1],a),this.h[2]=f(this.h[2],d),this.h[3]=f(this.h[3],h),this.h[4]=f(this.h[4],l)},h.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(e,t,r){"use strict";var i=r(10),n=r(21);function a(){if(!(this instanceof a))return new a;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}i.inherits(a,n),e.exports=a,a.blockSize=512,a.outSize=224,a.hmacStrength=192,a.padLength=64,a.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h.slice(0,7),"big"):i.split32(this.h.slice(0,7),"big")}},function(e,t,r){"use strict";var i=r(10),n=r(22);function a(){if(!(this instanceof a))return new a;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}i.inherits(a,n),e.exports=a,a.blockSize=1024,a.outSize=384,a.hmacStrength=192,a.padLength=128,a.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h.slice(0,12),"big"):i.split32(this.h.slice(0,12),"big")}},function(e,t,r){"use strict";var i=r(10),n=r(14),a=i.rotl32,s=i.sum32,f=i.sum32_3,o=i.sum32_4,c=n.BlockHash;function d(){if(!(this instanceof d))return new d;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function u(e,t,r,i){return e<=15?t^r^i:e<=31?t&r|~t&i:e<=47?(t|~r)^i:e<=63?t&i|r&~i:t^(r|~i)}function h(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}i.inherits(d,c),t.ripemd160=d,d.blockSize=512,d.outSize=160,d.hmacStrength=192,d.padLength=64,d.prototype._update=function(e,t){for(var r=this.h[0],i=this.h[1],n=this.h[2],c=this.h[3],d=this.h[4],m=r,g=i,w=n,T=c,M=d,S=0;S<80;S++){var A=s(a(o(r,u(S,i,n,c),e[b[S]+t],h(S)),y[S]),d);r=d,d=c,c=a(n,10),n=i,i=A,A=s(a(o(m,u(79-S,g,w,T),e[p[S]+t],l(S)),v[S]),M),m=M,M=T,T=a(w,10),w=g,g=A}A=f(this.h[1],n,T),this.h[1]=f(this.h[2],c,M),this.h[2]=f(this.h[3],d,m),this.h[3]=f(this.h[4],r,g),this.h[4]=f(this.h[0],i,w),this.h[0]=A},d.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"little"):i.split32(this.h,"little")};var b=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],p=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,r){"use strict";var i=r(10),n=r(12);function a(e,t,r){if(!(this instanceof a))return new a(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(i.toArray(t,r))}e.exports=a,a.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),n(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},a.prototype.update=function(e,t){return this.inner.update(e,t),this},a.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,r){"use strict";var i=r(11),n=r(51),a=r(4),s=a.utils.assert,f=r(52),o=r(53);function c(e){if(!(this instanceof c))return new c(e);"string"==typeof e&&(s(a.curves.hasOwnProperty(e),"Unknown curve "+e),e=a.curves[e]),e instanceof a.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=c,c.prototype.keyPair=function(e){return new f(this,e)},c.prototype.keyFromPrivate=function(e,t){return f.fromPrivate(this,e,t)},c.prototype.keyFromPublic=function(e,t){return f.fromPublic(this,e,t)},c.prototype.genKeyPair=function(e){e||(e={});for(var t=new n({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||a.rand(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),s=this.n.sub(new i(2));;){var f=new i(t.generate(r));if(!(f.cmp(s)>0))return f.iaddn(1),this.keyFromPrivate(f)}},c.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},c.prototype.sign=function(e,t,r,a){"object"==typeof r&&(a=r,r=null),a||(a={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new i(e,16));for(var s=this.n.byteLength(),f=t.getPrivate().toArray("be",s),c=e.toArray("be",s),d=new n({hash:this.hash,entropy:f,nonce:c,pers:a.pers,persEnc:a.persEnc||"utf8"}),u=this.n.sub(new i(1)),h=0;;h++){var l=a.k?a.k(h):new i(d.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(u)>=0)){var b=this.g.mul(l);if(!b.isInfinity()){var p=b.getX(),y=p.umod(this.n);if(0!==y.cmpn(0)){var v=l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));if(0!==(v=v.umod(this.n)).cmpn(0)){var m=(b.getY().isOdd()?1:0)|(0!==p.cmp(y)?2:0);return a.canonical&&v.cmp(this.nh)>0&&(v=this.n.sub(v),m^=1),new o({r:y,s:v,recoveryParam:m})}}}}}},c.prototype.verify=function(e,t,r,n){e=this._truncateToN(new i(e,16)),r=this.keyFromPublic(r,n);var a=(t=new o(t,"hex")).r,s=t.s;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;if(s.cmpn(1)<0||s.cmp(this.n)>=0)return!1;var f,c=s.invm(this.n),d=c.mul(e).umod(this.n),u=c.mul(a).umod(this.n);return this.curve._maxwellTrick?!(f=this.g.jmulAdd(d,r.getPublic(),u)).isInfinity()&&f.eqXToP(a):!(f=this.g.mulAdd(d,r.getPublic(),u)).isInfinity()&&0===f.getX().umod(this.n).cmp(a)},c.prototype.recoverPubKey=function(e,t,r,n){s((3&r)===r,"The recovery param is more than two bits"),t=new o(t,n);var a=this.n,f=new i(e),c=t.r,d=t.s,u=1&r,h=r>>1;if(c.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");c=h?this.curve.pointFromX(c.add(this.curve.n),u):this.curve.pointFromX(c,u);var l=t.r.invm(a),b=a.sub(f).mul(l).umod(a),p=d.mul(l).umod(a);return this.g.mulAdd(b,c,p)},c.prototype.getKeyRecoveryParam=function(e,t,r,i){if(null!==(t=new o(t,i)).recoveryParam)return t.recoveryParam;for(var n=0;n<4;n++){var a;try{a=this.recoverPubKey(e,t,n)}catch(e){continue}if(a.eq(r))return n}throw new Error("Unable to find valid recovery factor")}},function(e,t,r){"use strict";var i=r(15),n=r(19),a=r(12);function s(e){if(!(this instanceof s))return new s(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=n.toArray(e.entropy,e.entropyEnc||"hex"),r=n.toArray(e.nonce,e.nonceEnc||"hex"),i=n.toArray(e.pers,e.persEnc||"hex");a(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,i)}e.exports=s,s.prototype._init=function(e,t,r){var i=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var n=0;n<this.V.length;n++)this.K[n]=0,this.V[n]=1;this._update(i),this._reseed=1,this.reseedInterval=281474976710656},s.prototype._hmac=function(){return new i.hmac(this.hash,this.K)},s.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},s.prototype.reseed=function(e,t,r,i){"string"!=typeof t&&(i=r,r=t,t=null),e=n.toArray(e,t),r=n.toArray(r,i),a(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},s.prototype.generate=function(e,t,r,i){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(i=r,r=t,t=null),r&&(r=n.toArray(r,i||"hex"),this._update(r));for(var a=[];a.length<e;)this.V=this._hmac().update(this.V).digest(),a=a.concat(this.V);var s=a.slice(0,e);return this._update(r),this._reseed++,n.encode(s,t)}},function(e,t,r){"use strict";var i=r(11),n=r(4).utils.assert;function a(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=a,a.fromPublic=function(e,t,r){return t instanceof a?t:new a(e,{pub:t,pubEnc:r})},a.fromPrivate=function(e,t,r){return t instanceof a?t:new a(e,{priv:t,privEnc:r})},a.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},a.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},a.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},a.prototype._importPrivate=function(e,t){this.priv=new i(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},a.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?n(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||n(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},a.prototype.derive=function(e){return e.mul(this.priv).getX()},a.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},a.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},a.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,r){"use strict";var i=r(11),n=r(4).utils,a=n.assert;function s(e,t){if(e instanceof s)return e;this._importDER(e,t)||(a(e.r&&e.s,"Signature without r or s"),this.r=new i(e.r,16),this.s=new i(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function f(){this.place=0}function o(e,t){var r=e[t.place++];if(!(128&r))return r;for(var i=15&r,n=0,a=0,s=t.place;a<i;a++,s++)n<<=8,n|=e[s];return t.place=s,n}function c(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function d(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}e.exports=s,s.prototype._importDER=function(e,t){e=n.toArray(e,t);var r=new f;if(48!==e[r.place++])return!1;if(o(e,r)+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var a=o(e,r),s=e.slice(r.place,a+r.place);if(r.place+=a,2!==e[r.place++])return!1;var c=o(e,r);if(e.length!==c+r.place)return!1;var d=e.slice(r.place,c+r.place);return 0===s[0]&&128&s[1]&&(s=s.slice(1)),0===d[0]&&128&d[1]&&(d=d.slice(1)),this.r=new i(s),this.s=new i(d),this.recoveryParam=null,!0},s.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=c(t),r=c(r);!(r[0]||128&r[1]);)r=r.slice(1);var i=[2];d(i,t.length),(i=i.concat(t)).push(2),d(i,r.length);var a=i.concat(r),s=[48];return d(s,a.length),s=s.concat(a),n.encode(s,e)}},function(e,t,r){"use strict";var i=r(15),n=r(4),a=n.utils,s=a.assert,f=a.parseBytes,o=r(55),c=r(56);function d(e){if(s("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof d))return new d(e);e=n.curves[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=i.sha512}e.exports=d,d.prototype.sign=function(e,t){e=f(e);var r=this.keyFromSecret(t),i=this.hashInt(r.messagePrefix(),e),n=this.g.mul(i),a=this.encodePoint(n),s=this.hashInt(a,r.pubBytes(),e).mul(r.priv()),o=i.add(s).umod(this.curve.n);return this.makeSignature({R:n,S:o,Rencoded:a})},d.prototype.verify=function(e,t,r){e=f(e),t=this.makeSignature(t);var i=this.keyFromPublic(r),n=this.hashInt(t.Rencoded(),i.pubBytes(),e),a=this.g.mul(t.S());return t.R().add(i.pub().mul(n)).eq(a)},d.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return a.intFromLE(e.digest()).umod(this.curve.n)},d.prototype.keyFromPublic=function(e){return o.fromPublic(this,e)},d.prototype.keyFromSecret=function(e){return o.fromSecret(this,e)},d.prototype.makeSignature=function(e){return e instanceof c?e:new c(this,e)},d.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},d.prototype.decodePoint=function(e){var t=(e=a.parseBytes(e)).length-1,r=e.slice(0,t).concat(-129&e[t]),i=0!=(128&e[t]),n=a.intFromLE(r);return this.curve.pointFromY(n,i)},d.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},d.prototype.decodeInt=function(e){return a.intFromLE(e)},d.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,r){"use strict";var i=r(4).utils,n=i.assert,a=i.parseBytes,s=i.cachedProperty;function f(e,t){this.eddsa=e,this._secret=a(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=a(t.pub)}f.fromPublic=function(e,t){return t instanceof f?t:new f(e,{pub:t})},f.fromSecret=function(e,t){return t instanceof f?t:new f(e,{secret:t})},f.prototype.secret=function(){return this._secret},s(f,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())}),s(f,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),s(f,"privBytes",function(){var e=this.eddsa,t=this.hash(),r=e.encodingLength-1,i=t.slice(0,e.encodingLength);return i[0]&=248,i[r]&=127,i[r]|=64,i}),s(f,"priv",function(){return this.eddsa.decodeInt(this.privBytes())}),s(f,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()}),s(f,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)}),f.prototype.sign=function(e){return n(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},f.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},f.prototype.getSecret=function(e){return n(this._secret,"KeyPair is public only"),i.encode(this.secret(),e)},f.prototype.getPublic=function(e){return i.encode(this.pubBytes(),e)},e.exports=f},function(e,t,r){"use strict";var i=r(11),n=r(4).utils,a=n.assert,s=n.cachedProperty,f=n.parseBytes;function o(e,t){this.eddsa=e,"object"!=typeof t&&(t=f(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),a(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof i&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}s(o,"S",function(){return this.eddsa.decodeInt(this.Sencoded())}),s(o,"R",function(){return this.eddsa.decodePoint(this.Rencoded())}),s(o,"Rencoded",function(){return this.eddsa.encodePoint(this.R())}),s(o,"Sencoded",function(){return this.eddsa.encodeInt(this.S())}),o.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},o.prototype.toHex=function(){return n.encode(this.toBytes(),"hex").toUpperCase()},e.exports=o},function(e,t,r){var i=r(58),n=r(59);e.exports=function(e){if(i.crypto&&i.crypto.getRandomValues)return i.crypto.getRandomValues(e);if("object"==typeof i.msCrypto&&"function"==typeof i.msCrypto.getRandomValues)return i.msCrypto.getRandomValues(e);if(n.randomBytes){if(!(e instanceof Uint8Array))throw new TypeError("expected Uint8Array");if(e.length>65536){var t=new Error;throw t.code=22,t.message="Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length ("+e.length+") exceeds the number of bytes of entropy available via this API (65536).",t.name="QuotaExceededError",t}var r=n.randomBytes(e.length);return e.set(r),e}throw new Error("No secure random number generator available.")}},function(e,t,r){(function(t){var r;r="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{},e.exports=r}).call(this,r(23))},function(e,t){},function(e,t,r){var i=function(){return this||"object"==typeof self&&self}()||Function("return this")(),n=i.regeneratorRuntime&&Object.getOwnPropertyNames(i).indexOf("regeneratorRuntime")>=0,a=n&&i.regeneratorRuntime;if(i.regeneratorRuntime=void 0,e.exports=r(61),n)i.regeneratorRuntime=a;else try{delete i.regeneratorRuntime}catch(e){i.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var r,i=Object.prototype,n=i.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",f=a.asyncIterator||"@@asyncIterator",o=a.toStringTag||"@@toStringTag",c="object"==typeof e,d=t.regeneratorRuntime;if(d)c&&(e.exports=d);else{(d=t.regeneratorRuntime=c?e.exports:{}).wrap=w;var u="suspendedStart",h="suspendedYield",l="executing",b="completed",p={},y={};y[s]=function(){return this};var v=Object.getPrototypeOf,m=v&&v(v(O([])));m&&m!==i&&n.call(m,s)&&(y=m);var g=A.prototype=M.prototype=Object.create(y);S.prototype=g.constructor=A,A.constructor=S,A[o]=S.displayName="GeneratorFunction",d.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===S||"GeneratorFunction"===(t.displayName||t.name))},d.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,A):(e.__proto__=A,o in e||(e[o]="GeneratorFunction")),e.prototype=Object.create(g),e},d.awrap=function(e){return{__await:e}},_(E.prototype),E.prototype[f]=function(){return this},d.AsyncIterator=E,d.async=function(e,t,r,i){var n=new E(w(e,t,r,i));return d.isGeneratorFunction(t)?n:n.next().then(function(e){return e.done?e.value:n.next()})},_(g),g[o]="Generator",g[s]=function(){return this},g.toString=function(){return"[object Generator]"},d.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var i=t.pop();if(i in e)return r.value=i,r.done=!1,r}return r.done=!0,r}},d.values=O,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(I),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function i(i,n){return f.type="throw",f.arg=e,t.next=i,n&&(t.method="next",t.arg=r),!!n}for(var a=this.tryEntries.length-1;a>=0;--a){var s=this.tryEntries[a],f=s.completion;if("root"===s.tryLoc)return i("end");if(s.tryLoc<=this.prev){var o=n.call(s,"catchLoc"),c=n.call(s,"finallyLoc");if(o&&c){if(this.prev<s.catchLoc)return i(s.catchLoc,!0);if(this.prev<s.finallyLoc)return i(s.finallyLoc)}else if(o){if(this.prev<s.catchLoc)return i(s.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return i(s.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=e,s.arg=t,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),I(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var i=r.completion;if("throw"===i.type){var n=i.arg;I(r)}return n}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,i){return this.delegate={iterator:O(e),resultName:t,nextLoc:i},"next"===this.method&&(this.arg=r),p}}}function w(e,t,r,i){var n=t&&t.prototype instanceof M?t:M,a=Object.create(n.prototype),s=new R(i||[]);return a._invoke=function(e,t,r){var i=u;return function(n,a){if(i===l)throw new Error("Generator is already running");if(i===b){if("throw"===n)throw a;return N()}for(r.method=n,r.arg=a;;){var s=r.delegate;if(s){var f=U(s,r);if(f){if(f===p)continue;return f}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(i===u)throw i=b,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);i=l;var o=T(e,t,r);if("normal"===o.type){if(i=r.done?b:h,o.arg===p)continue;return{value:o.arg,done:r.done}}"throw"===o.type&&(i=b,r.method="throw",r.arg=o.arg)}}}(e,r,s),a}function T(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}function M(){}function S(){}function A(){}function _(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function E(e){var t;this._invoke=function(r,i){function a(){return new Promise(function(t,a){!function t(r,i,a,s){var f=T(e[r],e,i);if("throw"!==f.type){var o=f.arg,c=o.value;return c&&"object"==typeof c&&n.call(c,"__await")?Promise.resolve(c.__await).then(function(e){t("next",e,a,s)},function(e){t("throw",e,a,s)}):Promise.resolve(c).then(function(e){o.value=e,a(o)},function(e){return t("throw",e,a,s)})}s(f.arg)}(r,i,t,a)})}return t=t?t.then(a,a):a()}}function U(e,t){var i=e.iterator[t.method];if(i===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=r,U(e,t),"throw"===t.method))return p;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var n=T(i,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,p;var a=n.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,p):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function x(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function I(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function O(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function t(){for(;++i<e.length;)if(n.call(e,i))return t.value=e[i],t.done=!1,t;return t.value=r,t.done=!0,t};return a.next=a}}return{next:N}}function N(){return{value:r,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){var r=[],i=!0,n=!1,a=void 0;try{for(var s,f=e[Symbol.iterator]();!(i=(s=f.next()).done)&&(r.push(s.value),!t||r.length!==t);i=!0);}catch(e){n=!0,a=e}finally{try{i||null==f.return||f.return()}finally{if(n)throw a}}return r}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(t){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?e.exports=i=function(e){return r(e)}:e.exports=i=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":r(e)},i(t)}e.exports=i},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function r(t,i){return e.exports=r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(t,i)}e.exports=r},function(e,t,r){"use strict";var i=r(9),n=r(25),a=r(70),s=r(18);function f(e){var t=new a(e),r=n(a.prototype.request,t);return i.extend(r,a.prototype,t),i.extend(r,t),r}var o=f(s);o.Axios=a,o.create=function(e){return f(i.merge(s,e))},o.Cancel=r(29),o.CancelToken=r(85),o.isCancel=r(28),o.all=function(e){return Promise.all(e)},o.spread=r(86),e.exports=o,e.exports.default=o},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var i=r(18),n=r(9),a=r(80),s=r(81);function f(e){this.defaults=e,this.interceptors={request:new a,response:new a}}f.prototype.request=function(e){"string"==typeof e&&(e=n.merge({url:arguments[0]},arguments[1])),(e=n.merge(i,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},n.forEach(["delete","get","head","options"],function(e){f.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}}),n.forEach(["post","put","patch"],function(e){f.prototype[e]=function(t,r,i){return this.request(n.merge(i||{},{method:e,url:t,data:r}))}}),e.exports=f},function(e,t){var r,i,n=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function f(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var o,c=[],d=!1,u=-1;function h(){d&&o&&(d=!1,o.length?c=o.concat(c):u=-1,c.length&&l())}function l(){if(!d){var e=f(h);d=!0;for(var t=c.length;t;){for(o=c,c=[];++u<t;)o&&o[u].run();u=-1,t=c.length}o=null,d=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function b(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new b(e,t)),1!==c.length||d||f(l)},b.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(e,t,r){"use strict";var i=r(9);e.exports=function(e,t){i.forEach(e,function(r,i){i!==t&&i.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[i])})}},function(e,t,r){"use strict";var i=r(27);e.exports=function(e,t,r){var n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(i("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";e.exports=function(e,t,r,i,n){return e.config=t,r&&(e.code=r),e.request=i,e.response=n,e}},function(e,t,r){"use strict";var i=r(9);function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var a;if(r)a=r(t);else if(i.isURLSearchParams(t))a=t.toString();else{var s=[];i.forEach(t,function(e,t){null!=e&&(i.isArray(e)?t+="[]":e=[e],i.forEach(e,function(e){i.isDate(e)?e=e.toISOString():i.isObject(e)&&(e=JSON.stringify(e)),s.push(n(t)+"="+n(e))}))}),a=s.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},function(e,t,r){"use strict";var i=r(9),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,a,s={};return e?(i.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=i.trim(e.substr(0,a)).toLowerCase(),r=i.trim(e.substr(a+1)),t){if(s[t]&&n.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}}),s):s}},function(e,t,r){"use strict";var i=r(9);e.exports=i.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function n(e){var i=e;return t&&(r.setAttribute("href",i),i=r.href),r.setAttribute("href",i),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=n(window.location.href),function(t){var r=i.isString(t)?n(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function n(){this.message="String contains an invalid character"}n.prototype=new Error,n.prototype.code=5,n.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,r,a=String(e),s="",f=0,o=i;a.charAt(0|f)||(o="=",f%1);s+=o.charAt(63&t>>8-f%1*8)){if((r=a.charCodeAt(f+=.75))>255)throw new n;t=t<<8|r}return s}},function(e,t,r){"use strict";var i=r(9);e.exports=i.isStandardBrowserEnv()?{write:function(e,t,r,n,a,s){var f=[];f.push(e+"="+encodeURIComponent(t)),i.isNumber(r)&&f.push("expires="+new Date(r).toGMTString()),i.isString(n)&&f.push("path="+n),i.isString(a)&&f.push("domain="+a),!0===s&&f.push("secure"),document.cookie=f.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var i=r(9);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){i.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=n},function(e,t,r){"use strict";var i=r(9),n=r(82),a=r(28),s=r(18),f=r(83),o=r(84);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!f(e.url)&&(e.url=o(e.baseURL,e.url)),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=i.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),i.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=n(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(c(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var i=r(9);e.exports=function(e,t,r){return i.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var i=r(29);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new i(e),t(r.reason))})}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n(function(t){e=t}),cancel:e}},e.exports=n},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";r.r(t);var i=r(4),n=r.n(i),a=32,s=64;function f(){var e=r(57),t=new Uint8Array(s-a);e(t);var i,f=new n.a.eddsa("ed25519").keyFromSecret((i=t,Array.prototype.map.call(i,function(e){return("00"+e.toString(16)).slice(-2)}).join(""))),o=new Uint8Array(f.getPublic("bytes")),c=new Uint8Array(s);return c.set(new Uint8Array(f.getSecret("bytes")),0),c.set(o,s-a),{publicKey:o,privateKey:c}}var o=r(15),c=r.n(o),d=32;function u(e){var t=[].slice.call(e),r=c.a.sha256().update(t).digest();return new Uint8Array(r)}var h=d-20,l=40;function b(e){return u(e)}function p(e,t){var r=new Uint8Array(l);return new DataView(r.buffer,r.byteOffset).setBigUint64(0,t,!0),r.set(e,8),r}function y(e){if(e.byteLength!=l)throw new Error("txid has invalid length ".concat(e.byteLength));var t=new DataView(e.buffer,e.byteOffset).getBigUint64(0,!0);return[e.subarray(8),t]}var v=null;function m(){return null===v&&("undefined"==typeof TextEncoder&&r(24),v=new TextEncoder),v}var g,w,T=null;function M(){return null===T&&("undefined"==typeof TextDecoder&&r(24),T=new TextDecoder("utf-8")),T}function S(e){for(var t=function(e){for(var t=new Uint8Array(2*e.byteLength),r=0;r<e.byteLength;r++){var i="00"+e[r].toString(16).toLowerCase();t[2*r]=i.charCodeAt(i.length-2),t[2*r+1]=i.charCodeAt(i.length-1)}return t}(e),r=u(e),i=0;i<2*e.byteLength;i++){var n=r[Math.floor(i/2)%d];i%2==0?n>>=4:n&=15,t[i]>57&&n>7&&(t[i]-=32)}return"0x"+M().decode(t)}function A(e){e.startsWith("0x")&&(e=e.slice(2));var t=function(e){if(e.length%2!=0)throw new Error("invalid hex string '".concat(e,"'"));for(var t=new Uint8Array(e.length/2),r=0;r<e.length;r+=2){var i=parseInt(e.substr(r,2),16);if(isNaN(i))throw new Error("invalid hex string '".concat(e,"'"));t[r/2]=i}return t}(e);if(S(t).slice(2)!=e){if(e.toUpperCase()==e||e.toLowerCase()==e)return t;throw new Error("invalid checksum on hex string '".concat(e,"'"))}return t}function _(){var e=f(),t=function(e){if(e.byteLength!=a)throw new Error("public key has invalid length ".concat(e.byteLength));return u(e).slice(h)}(e.publicKey);return{publicKey:e.publicKey,privateKey:e.privateKey,address:U(t)}}function E(e){return A(e)}function U(e){return S(e)}function x(e){switch(e){case 0:throw new Error("reserved ExecutionResult received");case 1:return g.EXECUTION_RESULT_SUCCESS;case 2:return g.EXECUTION_RESULT_ERROR_SMART_CONTRACT;case 3:return g.EXECUTION_RESULT_ERROR_INPUT;case 4:return g.EXECUTION_RESULT_ERROR_CONTRACT_NOT_DEPLOYED;case 5:return g.EXECUTION_RESULT_ERROR_UNEXPECTED;case 6:return g.EXECUTION_RESULT_NOT_EXECUTED;default:throw new Error("unsupported ExecutionResult received: ".concat(e))}}function I(e){switch(e){case 0:throw new Error("reserved RequestStatus received");case 1:return w.REQUEST_STATUS_COMPLETED;case 2:return w.REQUEST_STATUS_IN_PROCESS;case 3:return w.REQUEST_STATUS_BAD_REQUEST;case 4:return w.REQUEST_STATUS_CONGESTION;case 5:return w.REQUEST_STATUS_SYSTEM_ERROR;case 6:return w.REQUEST_STATUS_OUT_OF_SYNC;case 7:return w.REQUEST_STATUS_NOT_FOUND;default:throw new Error("unsupported RequestStatus received: ".concat(e))}}!function(e){e.EXECUTION_RESULT_SUCCESS="SUCCESS",e.EXECUTION_RESULT_ERROR_SMART_CONTRACT="ERROR_SMART_CONTRACT",e.EXECUTION_RESULT_ERROR_INPUT="ERROR_INPUT",e.EXECUTION_RESULT_ERROR_CONTRACT_NOT_DEPLOYED="ERROR_CONTRACT_NOT_DEPLOYED",e.EXECUTION_RESULT_ERROR_UNEXPECTED="ERROR_UNEXPECTED",e.EXECUTION_RESULT_NOT_EXECUTED="NOT_EXECUTED"}(g||(g={})),function(e){e.REQUEST_STATUS_COMPLETED="COMPLETED",e.REQUEST_STATUS_IN_PROCESS="IN_PROCESS",e.REQUEST_STATUS_BAD_REQUEST="BAD_REQUEST",e.REQUEST_STATUS_CONGESTION="CONGESTION",e.REQUEST_STATUS_SYSTEM_ERROR="SYSTEM_ERROR",e.REQUEST_STATUS_OUT_OF_SYNC="OUT_OF_SYNC",e.REQUEST_STATUS_NOT_FOUND="NOT_FOUND"}(w||(w={}));var R,O=r(8),N=r.n(O),k=r(13),C=r.n(k),z=r(3),B=r.n(z),P=r(1),L=r.n(P),D=r(2),q=r.n(D);function j(e){switch(e){case R.NETWORK_TYPE_MAIN_NET:return 77;case R.NETWORK_TYPE_TEST_NET:return 84;default:throw new Error("unsupported network type given ".concat(e))}}!function(e){e.NETWORK_TYPE_MAIN_NET="MAIN_NET",e.NETWORK_TYPE_TEST_NET="TEST_NET"}(R||(R={}));var V,F,H,J,X=r(5),K=r.n(X),W=r(6),G=r.n(W),Y=r(7),Z=r.n(Y),Q=r(0),$=r.n(Q),ee=Object.freeze({TypeMessage:1,TypeBytes:2,TypeString:3,TypeUnion:4,TypeUint8:11,TypeUint16:12,TypeUint32:13,TypeUint64:14,TypeUint8Array:21,TypeUint16Array:22,TypeUint32Array:23,TypeUint64Array:24,TypeMessageArray:31,TypeBytesArray:32,TypeStringArray:33}),te=Object.freeze((V={},$()(V,ee.TypeMessage,4),$()(V,ee.TypeBytes,4),$()(V,ee.TypeString,4),$()(V,ee.TypeUnion,2),$()(V,ee.TypeUint8,1),$()(V,ee.TypeUint16,2),$()(V,ee.TypeUint32,4),$()(V,ee.TypeUint64,8),$()(V,ee.TypeUint8Array,4),$()(V,ee.TypeUint16Array,4),$()(V,ee.TypeUint32Array,4),$()(V,ee.TypeUint64Array,4),$()(V,ee.TypeMessageArray,4),$()(V,ee.TypeBytesArray,4),$()(V,ee.TypeStringArray,4),V)),re=Object.freeze((F={},$()(F,ee.TypeMessage,4),$()(F,ee.TypeBytes,4),$()(F,ee.TypeString,4),$()(F,ee.TypeUnion,2),$()(F,ee.TypeUint8,1),$()(F,ee.TypeUint16,2),$()(F,ee.TypeUint32,4),$()(F,ee.TypeUint64,4),$()(F,ee.TypeUint8Array,4),$()(F,ee.TypeUint16Array,4),$()(F,ee.TypeUint32Array,4),$()(F,ee.TypeUint64Array,4),$()(F,ee.TypeMessageArray,4),$()(F,ee.TypeBytesArray,4),$()(F,ee.TypeStringArray,4),F)),ie=Object.freeze((H={},$()(H,ee.TypeMessage,!0),$()(H,ee.TypeBytes,!0),$()(H,ee.TypeString,!0),$()(H,ee.TypeUnion,!0),$()(H,ee.TypeUint8,!1),$()(H,ee.TypeUint16,!1),$()(H,ee.TypeUint32,!1),$()(H,ee.TypeUint64,!1),$()(H,ee.TypeUint8Array,!0),$()(H,ee.TypeUint16Array,!0),$()(H,ee.TypeUint32Array,!0),$()(H,ee.TypeUint64Array,!0),$()(H,ee.TypeMessageArray,!0),$()(H,ee.TypeBytesArray,!0),$()(H,ee.TypeStringArray,!0),H)),ne=Object.freeze((J={},$()(J,ee.TypeMessage,4),$()(J,ee.TypeBytes,1),$()(J,ee.TypeString,1),$()(J,ee.TypeUnion,0),$()(J,ee.TypeUint8,0),$()(J,ee.TypeUint16,0),$()(J,ee.TypeUint32,0),$()(J,ee.TypeUint64,0),$()(J,ee.TypeUint8Array,1),$()(J,ee.TypeUint16Array,2),$()(J,ee.TypeUint32Array,4),$()(J,ee.TypeUint64Array,4),$()(J,ee.TypeMessageArray,4),$()(J,ee.TypeBytesArray,4),$()(J,ee.TypeStringArray,4),J)),ae=function(){function e(t,r,i,n){L()(this,e),this.cursor=t,this.endCursor=r,this.fieldType=i,this.m=n}return q()(e,[{key:"hasNext",value:function(){return this.cursor<this.endCursor}},{key:"nextUint8",value:function(){if(this.cursor+te[ee.TypeUint8]>this.endCursor)return this.cursor=this.endCursor,0;var e=this.m.getUint8InOffset(this.cursor);return this.cursor+=te[ee.TypeUint8],this.cursor=fe(this.cursor,ee.TypeUint8Array),e}},{key:"nextUint16",value:function(){if(this.cursor+te[ee.TypeUint16]>this.endCursor)return this.cursor=this.endCursor,0;var e=this.m.getUint16InOffset(this.cursor);return this.cursor+=te[ee.TypeUint16],this.cursor=fe(this.cursor,ee.TypeUint16Array),e}},{key:"nextUint32",value:function(){if(this.cursor+te[ee.TypeUint32]>this.endCursor)return this.cursor=this.endCursor,0;var e=this.m.getUint32InOffset(this.cursor);return this.cursor+=te[ee.TypeUint32],this.cursor=fe(this.cursor,ee.TypeUint32Array),e}},{key:"nextUint64",value:function(){if(this.cursor+te[ee.TypeUint64]>this.endCursor)return this.cursor=this.endCursor,BigInt(0);var e=this.m.getUint64InOffset(this.cursor);return this.cursor+=te[ee.TypeUint64],this.cursor=fe(this.cursor,ee.TypeUint64Array),e}},{key:"nextMessage",value:function(){if(this.cursor+te[ee.TypeMessage]>this.endCursor)return this.cursor=this.endCursor,[new Uint8Array,0];var e=this.m.getOffsetInOffset(this.cursor);if(this.cursor+=te[ee.TypeMessage],this.cursor=fe(this.cursor,ee.TypeMessage),this.cursor+e>this.endCursor)return this.cursor=this.endCursor,[new Uint8Array,0];var t=this.m.bytes.subarray(this.cursor,this.cursor+e);return this.cursor+=e,this.cursor=fe(this.cursor,ee.TypeMessageArray),[t,e]}},{key:"nextBytes",value:function(){if(this.cursor+te[ee.TypeBytes]>this.endCursor)return this.cursor=this.endCursor,new Uint8Array;var e=this.m.getOffsetInOffset(this.cursor);if(this.cursor+=te[ee.TypeBytes],this.cursor=fe(this.cursor,ee.TypeBytes),this.cursor+e>this.endCursor)return this.cursor=this.endCursor,new Uint8Array;var t=this.m.bytes.subarray(this.cursor,this.cursor+e);return this.cursor+=e,this.cursor=fe(this.cursor,ee.TypeBytesArray),t}},{key:"nextString",value:function(){var e=this.nextBytes();return M().decode(e)}},{key:Symbol.iterator,value:function(){var e=this;return{next:function(){if(!e.hasNext())return{done:!0,value:void 0};switch(e.fieldType){case ee.TypeUint8:return{value:e.nextUint8(),done:!1};case ee.TypeUint16:return{value:e.nextUint16(),done:!1};case ee.TypeUint32:return{value:e.nextUint32(),done:!1};case ee.TypeUint64:return{value:e.nextUint64(),done:!1};case ee.TypeMessage:return{value:e.nextMessage(),done:!1};case ee.TypeBytes:return{value:e.nextBytes(),done:!1};case ee.TypeString:return{value:e.nextString(),done:!1};default:throw new Error("unsupported array type")}}}}}]),e}();function se(e,t){var r=re[t];return Math.floor((e+r-1)/r)*r}function fe(e,t){var r=ne[t];return Math.floor((e+r-1)/r)*r}var oe=function(){function e(t,r,i,n){L()(this,e),this.size=r,this.scheme=i,this.unions=n,$()(this,"bytes",void 0),$()(this,"dataView",void 0),$()(this,"offsets",void 0),this.bytes=t,this.dataView=new DataView(t.buffer,t.byteOffset),this.offsets=null}return q()(e,[{key:"lazyCalcOffsets",value:function(){if(null!==this.offsets)return!0;for(var e={},t=0,r=0,i=0;i<this.scheme.length;i++){var n=this.scheme[i];if((t=se(t,n))>=this.size)return!1;if(e[i]=t,n==ee.TypeUnion){if(t+te[ee.TypeUnion]>this.size)return!1;var a=this.dataView.getUint16(t,!0);if(t+=te[ee.TypeUnion],r>=this.unions.length||a>=this.unions[r].length)return!1;n=this.unions[r][a],r+=1,t=se(t,n)}if(ie[n]){if(t+te[n]>this.size)return!1;var s=this.dataView.getUint32(t,!0);t=fe(t+=te[n],n),t+=s}else t+=te[n]}return!(t>this.size)&&(this.offsets=e,!0)}},{key:"isValid",value:function(){if(void 0===this.bytes)throw"uninitialized membuffer, did you create it directly without a Builder or a Reader?";return this.lazyCalcOffsets()}},{key:"rawBuffer",value:function(){return this.bytes.subarray(0,this.size)}},{key:"rawBufferForField",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length||e>=this.scheme.length)return new Uint8Array;var r=this.scheme[e],i=this.offsets[e];if(r==ee.TypeUnion){var n=this.dataView.getUint16(i,!0);if(i+=te[ee.TypeUnion],t>=this.unions.length||n>=this.unions[t].length)return new Uint8Array;i=se(i,r=this.unions[t][n])}if(ie[r]){var a=this.dataView.getUint32(i,!0);return i=fe(i+=te[r],r),this.bytes.subarray(i,i+a)}return this.bytes.subarray(i,i+te[r])}},{key:"rawBufferWithHeaderForField",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length||e>=this.scheme.length)return new Uint8Array;var r=this.scheme[e],i=this.offsets[e],n=i;if(r==ee.TypeUnion){var a=this.dataView.getUint16(i,!0);if(i+=te[ee.TypeUnion],t>=this.unions.length||a>=this.unions[t].length)return new Uint8Array;i=se(i,r=this.unions[t][a])}if(ie[r]){var s=this.dataView.getUint32(i,!0);return i=fe(i+=te[r],r),this.bytes.subarray(n,i+s)}return this.bytes.subarray(n,i+te[r])}},{key:"getOffsetInOffset",value:function(e){return this.dataView.getUint32(e,!0)}},{key:"getUint8InOffset",value:function(e){return this.dataView.getUint8(e)}},{key:"setUint8InOffset",value:function(e,t){return this.dataView.setUint8(e,t)}},{key:"getUint8",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return 0;var t=this.offsets[e];return this.getUint8InOffset(t)}},{key:"setUint8",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[e];return this.setUint8InOffset(r,t)}},{key:"getUint16InOffset",value:function(e){return this.dataView.getUint16(e,!0)}},{key:"setUint16InOffset",value:function(e,t){return this.dataView.setUint16(e,t,!0)}},{key:"getUint16",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return 0;var t=this.offsets[e];return this.getUint16InOffset(t)}},{key:"setUint16",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[e];return this.setUint16InOffset(r,t)}},{key:"getUint32InOffset",value:function(e){return this.dataView.getUint32(e,!0)}},{key:"setUint32InOffset",value:function(e,t){return this.dataView.setUint32(e,t,!0)}},{key:"getUint32",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return 0;var t=this.offsets[e];return this.getUint32InOffset(t)}},{key:"setUint32",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[e];return this.setUint32InOffset(r,t)}},{key:"getUint64InOffset",value:function(e){return this.dataView.getBigUint64(e,!0)}},{key:"setUint64InOffset",value:function(e,t){return this.dataView.setBigUint64(e,t,!0)}},{key:"getUint64",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return BigInt(0);var t=this.offsets[e];return this.getUint64InOffset(t)}},{key:"setUint64",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[e];return this.setUint64InOffset(r,t)}},{key:"getMessageInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeMessage],ee.TypeMessage),this.bytes.subarray(e,e+t)}},{key:"getMessage",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new Uint8Array;var t=this.offsets[e];return this.getMessageInOffset(t)}},{key:"getBytesInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return(e=fe(e+=te[ee.TypeBytes],ee.TypeBytes))+t>this.bytes.byteLength?new Uint8Array:this.bytes.subarray(e,e+t)}},{key:"setBytesInOffset",value:function(e,t){if(this.dataView.getUint32(e,!0)!=t.byteLength)throw new Error("size mismatch");return e=fe(e+=te[ee.TypeBytes],ee.TypeBytes),this.bytes.set(t,e)}},{key:"getBytes",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new Uint8Array;var t=this.offsets[e];return this.getBytesInOffset(t)}},{key:"setBytes",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[e];return this.setBytesInOffset(r,t)}},{key:"getStringInOffset",value:function(e){var t=this.getBytesInOffset(e);return M().decode(t)}},{key:"setStringInOffset",value:function(e,t){return this.setBytesInOffset(e,m().encode(t))}},{key:"getString",value:function(e){var t=this.getBytes(e);return M().decode(t)}},{key:"setString",value:function(e,t){return this.setBytes(e,m().encode(t))}},{key:"getUnionIndex",value:function(e,t){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return 65535;var r=this.offsets[e],i=this.dataView.getUint16(r,!0);return r+=te[ee.TypeUnion],t>=this.unions.length||i>=this.unions[t].length?65535:(r=se(r,this.unions[t][i]),i)}},{key:"isUnionIndex",value:function(e,t,r){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return[!1,0];var i=this.offsets[e],n=this.dataView.getUint16(i,!0);return i+=te[ee.TypeUnion],t>=this.unions.length||n>=this.unions[t].length?[!1,0]:[n==r,i=se(i,this.unions[t][n])]}},{key:"getUint8ArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeUint8Array],ee.TypeUint8Array),new ae(e,e+t,ee.TypeUint8,this)}},{key:"getUint8ArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeUint8,this);var t=this.offsets[e];return this.getUint8ArrayIteratorInOffset(t)}},{key:"getUint16ArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeUint32Array],ee.TypeUint16Array),new ae(e,e+t,ee.TypeUint16,this)}},{key:"getUint16ArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeUint16,this);var t=this.offsets[e];return this.getUint16ArrayIteratorInOffset(t)}},{key:"getUint32ArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeUint32Array],ee.TypeUint32Array),new ae(e,e+t,ee.TypeUint32,this)}},{key:"getUint32ArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeUint32,this);var t=this.offsets[e];return this.getUint32ArrayIteratorInOffset(t)}},{key:"getUint64ArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeUint64Array],ee.TypeUint64Array),new ae(e,e+t,ee.TypeUint64,this)}},{key:"getUint64ArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeUint64,this);var t=this.offsets[e];return this.getUint64ArrayIteratorInOffset(t)}},{key:"getMessageArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeMessageArray],ee.TypeMessageArray),new ae(e,e+t,ee.TypeMessage,this)}},{key:"getMessageArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeMessage,this);var t=this.offsets[e];return this.getMessageArrayIteratorInOffset(t)}},{key:"getBytesArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeMessageArray],ee.TypeBytesArray),new ae(e,e+t,ee.TypeBytes,this)}},{key:"getBytesArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeBytes,this);var t=this.offsets[e];return this.getBytesArrayIteratorInOffset(t)}},{key:"getStringArrayIteratorInOffset",value:function(e){var t=this.dataView.getUint32(e,!0);return e=fe(e+=te[ee.TypeStringArray],ee.TypeStringArray),new ae(e,e+t,ee.TypeString,this)}},{key:"getStringArrayIterator",value:function(e){if(!this.lazyCalcOffsets()||e>=Object.keys(this.offsets).length)return new ae(0,0,ee.TypeString,this);var t=this.offsets[e];return this.getStringArrayIteratorInOffset(t)}}]),e}(),ce=function(){function e(){L()(this,e),$()(this,"size",void 0),this.size=0}return q()(e,[{key:"reset",value:function(){this.size=0}},{key:"getSize",value:function(){return this.size}},{key:"writeUint8",value:function(e,t){this.size=se(this.size,ee.TypeUint8),e&&new DataView(e.buffer,e.byteOffset).setUint8(this.size,t),this.size+=te[ee.TypeUint8]}},{key:"writeUint16",value:function(e,t){this.size=se(this.size,ee.TypeUint16),e&&new DataView(e.buffer,e.byteOffset).setUint16(this.size,t,!0),this.size+=te[ee.TypeUint16]}},{key:"writeUint32",value:function(e,t){this.size=se(this.size,ee.TypeUint32),e&&new DataView(e.buffer,e.byteOffset).setUint32(this.size,t,!0),this.size+=te[ee.TypeUint32]}},{key:"writeUint64",value:function(e,t){this.size=se(this.size,ee.TypeUint64),e&&new DataView(e.buffer,e.byteOffset).setBigUint64(this.size,t,!0),this.size+=te[ee.TypeUint64]}},{key:"writeBytes",value:function(e,t){var r=e?new DataView(e.buffer,e.byteOffset):void 0;this.size=se(this.size,ee.TypeBytes),e&&(t?r.setUint32(this.size,t.byteLength,!0):r.setUint32(this.size,0,!0)),this.size+=te[ee.TypeBytes],this.size=fe(this.size,ee.TypeBytes),t&&(e&&e.set(t,this.size),this.size+=t.byteLength)}},{key:"writeString",value:function(e,t){this.writeBytes(e,m().encode(t))}},{key:"writeUnionIndex",value:function(e,t){this.size=se(this.size,ee.TypeUnion),e&&new DataView(e.buffer,e.byteOffset).setUint16(this.size,t,!0),this.size+=te[ee.TypeUnion]}},{key:"writeUint8Array",value:function(e,t){this.size=se(this.size,ee.TypeUint8Array),e&&new DataView(e.buffer,e.byteOffset).setUint32(this.size,t.length*te[ee.TypeUint8],!0),this.size+=te[ee.TypeUint8Array],this.size=fe(this.size,ee.TypeUint8Array);var r=!0,i=!1,n=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var f=a.value;this.writeUint8(e,f)}}catch(e){i=!0,n=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw n}}}},{key:"writeUint16Array",value:function(e,t){this.size=se(this.size,ee.TypeUint16Array),e&&new DataView(e.buffer,e.byteOffset).setUint32(this.size,t.length*te[ee.TypeUint16],!0),this.size+=te[ee.TypeUint16Array],this.size=fe(this.size,ee.TypeUint16Array);var r=!0,i=!1,n=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var f=a.value;this.writeUint16(e,f)}}catch(e){i=!0,n=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw n}}}},{key:"writeUint32Array",value:function(e,t){this.size=se(this.size,ee.TypeUint32Array),e&&new DataView(e.buffer,e.byteOffset).setUint32(this.size,t.length*te[ee.TypeUint32],!0),this.size+=te[ee.TypeUint32Array],this.size=fe(this.size,ee.TypeUint32Array);var r=!0,i=!1,n=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var f=a.value;this.writeUint32(e,f)}}catch(e){i=!0,n=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw n}}}},{key:"writeUint64Array",value:function(e,t){this.size=se(this.size,ee.TypeUint64Array),e&&new DataView(e.buffer,e.byteOffset).setUint32(this.size,t.length*te[ee.TypeUint64],!0),this.size+=te[ee.TypeUint64Array],this.size=fe(this.size,ee.TypeUint64Array);var r=!0,i=!1,n=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var f=a.value;this.writeUint64(e,f)}}catch(e){i=!0,n=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw n}}}},{key:"writeBytesArray",value:function(e,t){this.size=se(this.size,ee.TypeBytesArray);var r=this.size;this.size+=te[ee.TypeBytesArray],this.size=fe(this.size,ee.TypeBytesArray);var i=this.size,n=!0,a=!1,s=void 0;try{for(var f,o=t[Symbol.iterator]();!(n=(f=o.next()).done);n=!0){var c=f.value;this.writeBytes(e,c)}}catch(e){a=!0,s=e}finally{try{n||null==o.return||o.return()}finally{if(a)throw s}}var d=this.size-i;e&&new DataView(e.buffer,e.byteOffset).setUint32(r,d,!0)}},{key:"writeStringArray",value:function(e,t){this.size=se(this.size,ee.TypeStringArray);var r=this.size;this.size+=te[ee.TypeStringArray],this.size=fe(this.size,ee.TypeStringArray);var i=this.size,n=!0,a=!1,s=void 0;try{for(var f,o=t[Symbol.iterator]();!(n=(f=o.next()).done);n=!0){var c=f.value;this.writeString(e,c)}}catch(e){a=!0,s=e}finally{try{n||null==o.return||o.return()}finally{if(a)throw s}}var d=this.size-i;e&&new DataView(e.buffer,e.byteOffset).setUint32(r,d,!0)}},{key:"writeMessage",value:function(e,t){this.size=se(this.size,ee.TypeMessage);var r=this.size;this.size+=te[ee.TypeMessage],this.size=fe(this.size,ee.TypeMessage),e?t.write(e.subarray(this.size)):t.write(null);var i=t.getSize();this.size+=i,e&&new DataView(e.buffer,e.byteOffset).setUint32(r,i,!0)}},{key:"writeMessageArray",value:function(e,t){this.size=se(this.size,ee.TypeMessageArray);var r=this.size;this.size+=te[ee.TypeMessageArray],this.size=fe(this.size,ee.TypeMessageArray);var i=this.size,n=!0,a=!1,s=void 0;try{for(var f,o=t[Symbol.iterator]();!(n=(f=o.next()).done);n=!0){var c=f.value;this.writeMessage(e,c)}}catch(e){a=!0,s=e}finally{try{n||null==o.return||o.return()}finally{if(a)throw s}}var d=this.size-i;e&&new DataView(e.buffer,e.byteOffset).setUint32(r,d,!0)}}]),e}(),de=function(){function e(){L()(this,e),$()(this,"builder",void 0),this.builder=new ce}return q()(e,[{key:"getSize",value:function(){return this.builder.getSize()}},{key:"calcRequiredSize",value:function(){return this.write(null),this.builder.getSize()}},{key:"build",value:function(){var e=new Uint8Array(this.calcRequiredSize());return this.write(e),e}}]),e}(),ue=[ee.TypeUint16,ee.TypeUint64,ee.TypeUint64],he=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeUint32(e,this.fields.protocolVersion),this.builder.writeUint32(e,this.fields.virtualChainId),this.builder.writeUint64(e,this.fields.transactionTimestamp),this.builder.writeBytes(e,this.fields.txHash)}}]),t}(de),le=[ee.TypeMessage],be=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessage(e,this.fields.signedTransaction)}}]),t}(de),pe=[ee.TypeMessage,ee.TypeUint16,ee.TypeMessage],ye=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessage(e,this.fields.signedQuery)}}]),t}(de),ve=[ee.TypeMessage,ee.TypeMessage],me=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessage(e,this.fields.transactionRef)}}]),t}(de),ge=[ee.TypeMessage,ee.TypeUint16,ee.TypeMessage],we=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessage(e,this.fields.transactionRef)}}]),t}(de),Te=[ee.TypeMessage,ee.TypeUint16,ee.TypeMessage,ee.TypeBytes],Me=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeUint32(e,this.fields.protocolVersion),this.builder.writeUint32(e,this.fields.virtualChainId),this.builder.writeUint64(e,this.fields.blockHeight)}}]),t}(de),Se=[ee.TypeMessage,ee.TypeMessage,ee.TypeMessage,ee.TypeMessageArray,ee.TypeMessage,ee.TypeMessage,ee.TypeMessageArray,ee.TypeMessageArray,ee.TypeMessage];function Ae(e){return BigInt(e.getTime())*BigInt(1e6)}function _e(e){return new Date(Number(e/BigInt(1e6)))}var Ee=[ee.TypeUnion],Ue=[[ee.TypeUint32,ee.TypeUint64,ee.TypeString,ee.TypeBytes]],xe=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){switch(this.builder.reset(),this.builder.writeUnionIndex(e,this.fields.type),this.fields.type){case 0:this.builder.writeUint32(e,this.fields.value);break;case 1:this.builder.writeUint64(e,this.fields.value);break;case 2:this.builder.writeString(e,this.fields.value);break;case 3:this.builder.writeBytes(e,this.fields.value);break;default:throw new Error("unknown Argument type ".concat(this.fields.type))}}}]),t}(de),Ie=[ee.TypeMessageArray],Re=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessageArray(e,this.fields.arguments)}}]),t}(de),Oe=[ee.TypeString,ee.TypeString,ee.TypeBytes],Ne=[ee.TypeMessageArray],ke=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeUint16(e,this.fields.networkType),this.builder.writeBytes(e,this.fields.signerPublicKey)}}]),t}(de),Ce=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){switch(this.builder.reset(),this.builder.writeUnionIndex(e,this.fields.scheme),this.fields.scheme){case 0:this.builder.writeMessage(e,this.fields.eddsa);break;default:throw new Error("unknown Signer scheme ".concat(this.fields.scheme))}}}]),t}(de),ze=[ee.TypeUnion],Be=[[ee.TypeMessage,ee.TypeMessage]],Pe=[ee.TypeUint16,ee.TypeBytes],Le=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeUint32(e,this.fields.protocolVersion),this.builder.writeUint32(e,this.fields.virtualChainId),this.builder.writeUint64(e,this.fields.timestamp),this.builder.writeMessage(e,this.fields.signer),this.builder.writeString(e,this.fields.contractName),this.builder.writeString(e,this.fields.methodName),this.builder.writeBytes(e,this.fields.inputArgumentArray)}}]),t}(de),De=[ee.TypeUint32,ee.TypeUint32,ee.TypeUint64,ee.TypeMessage,ee.TypeString,ee.TypeString,ee.TypeBytes],qe=[ee.TypeMessage,ee.TypeBytes],je=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessage(e,this.fields.transaction),this.builder.writeBytes(e,this.fields.signature)}}]),t}(de),Ve=[ee.TypeBytes,ee.TypeUint16,ee.TypeBytes,ee.TypeBytes],Fe=function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeUint32(e,this.fields.protocolVersion),this.builder.writeUint32(e,this.fields.virtualChainId),this.builder.writeUint64(e,this.fields.timestamp),this.builder.writeMessage(e,this.fields.signer),this.builder.writeString(e,this.fields.contractName),this.builder.writeString(e,this.fields.methodName),this.builder.writeBytes(e,this.fields.inputArgumentArray)}}]),t}(de),He=(ee.TypeMessage,ee.TypeBytes,function(e){function t(e){var r;return L()(this,t),(r=K()(this,G()(t).call(this))).fields=e,r}return Z()(t,e),q()(t,[{key:"write",value:function(e){this.builder.reset(),this.builder.writeMessage(e,this.fields.query),this.builder.writeBytes(e,this.fields.signature)}}]),t}(de)),Je=[ee.TypeUint16,ee.TypeBytes,ee.TypeBytes],Xe=[ee.TypeUint32,ee.TypeUint32,ee.TypeUint64,ee.TypeBytes,ee.TypeUint64,ee.TypeBytes,ee.TypeBytes,ee.TypeUint32],Ke=[ee.TypeUint32,ee.TypeUint32,ee.TypeUint64,ee.TypeBytes,ee.TypeUint64,ee.TypeBytes,ee.TypeBytes,ee.TypeBytes,ee.TypeBytes,ee.TypeUint32,ee.TypeUint32],We=64;function Ge(e){return Array.prototype.map.call(e,function(e){return("00"+e.toString(16)).slice(-2)}).join("")}var Ye,Ze=function(e){return{type:"uint32",value:e}},Qe=function(e){return{type:"uint64",value:"number"==typeof e?BigInt(e):e}},$e=function(e){return{type:"string",value:e}},et=function(e){return{type:"bytes",value:e}},tt=function(e){return et(E(e))};function rt(e){var t=function(e){for(var t=[],r=0;r<e.length;r++){var i=e[r];switch(i.type){case"uint32":t.push(new xe({type:0,value:i.value}));break;case"uint64":t.push(new xe({type:1,value:i.value}));break;case"string":t.push(new xe({type:2,value:i.value}));break;case"bytes":t.push(new xe({type:3,value:i.value}));break;default:throw new Error("Argument unknown type: ".concat(i))}}return t}(e),r=new Re({arguments:t}).build();return new oe(r,r.byteLength,Ie,[])}function it(e){return rt(e).rawBufferForField(0,0)}function nt(e){for(var t=[],r=new oe(e,e.byteLength,Ie,[]).getMessageArrayIterator(0),i=0;r.hasNext();){var n=r.nextMessage(),a=B()(n,2),s=a[0],f=a[1],o=new oe(s,f,Ee,Ue),c=o.getUnionIndex(0,0);switch(c){case 0:var d=o.isUnionIndex(0,0,0),u=B()(d,2)[1];t.push(Ze(o.getUint32InOffset(u)));break;case 1:var h=o.isUnionIndex(0,0,1),l=B()(h,2)[1];t.push(Qe(o.getUint64InOffset(l)));break;case 2:var b=o.isUnionIndex(0,0,2),p=B()(b,2)[1];t.push($e(o.getStringInOffset(p)));break;case 3:var y=o.isUnionIndex(0,0,3),v=B()(y,2)[1];t.push(et(o.getBytesInOffset(v)));break;default:throw new Error("received argument ".concat(i," has unknown type: ").concat(c))}i++}return t}function at(e){for(var t=[],r=new oe(e,e.byteLength,Ne,[]).getMessageArrayIterator(0);r.hasNext();){var i=r.nextMessage(),n=B()(i,2),a=n[0],s=n[1],f=new oe(a,s,Oe,[]);t.push({contractName:f.getString(0),eventName:f.getString(1),arguments:nt(f.rawBufferWithHeaderForField(2,0))}),0}return t}function st(e){switch(e){case 0:throw new Error("reserved TransactionStatus received");case 1:return Ye.TRANSACTION_STATUS_COMMITTED;case 2:return Ye.TRANSACTION_STATUS_DUPLICATE_TRANSACTION_ALREADY_COMMITTED;case 3:return Ye.TRANSACTION_STATUS_PENDING;case 4:return Ye.TRANSACTION_STATUS_DUPLICATE_TRANSACTION_ALREADY_PENDING;case 6:return Ye.TRANSACTION_STATUS_NO_RECORD_FOUND;case 7:return Ye.TRANSACTION_STATUS_REJECTED_UNSUPPORTED_VERSION;case 8:return Ye.TRANSACTION_STATUS_REJECTED_VIRTUAL_CHAIN_MISMATCH;case 9:return Ye.TRANSACTION_STATUS_REJECTED_TIMESTAMP_WINDOW_EXCEEDED;case 10:return Ye.TRANSACTION_STATUS_REJECTED_SIGNATURE_MISMATCH;case 11:return Ye.TRANSACTION_STATUS_REJECTED_UNKNOWN_SIGNER_SCHEME;case 12:return Ye.TRANSACTION_STATUS_REJECTED_GLOBAL_PRE_ORDER;case 13:return Ye.TRANSACTION_STATUS_REJECTED_VIRTUAL_CHAIN_PRE_ORDER;case 14:return Ye.TRANSACTION_STATUS_REJECTED_SMART_CONTRACT_PRE_ORDER;case 15:return Ye.TRANSACTION_STATUS_REJECTED_TIMESTAMP_AHEAD_OF_NODE_TIME;case 16:return Ye.TRANSACTION_STATUS_REJECTED_CONGESTION;case 17:return Ye.TRANSACTION_STATUS_REJECTED_NODE_OUT_OF_SYNC;default:throw new Error("unsupported TransactionStatus received: ".concat(e))}}function ft(e,t){if(1!=e.protocolVersion)throw new Error("expected ProtocolVersion 1, ".concat(e.protocolVersion," given"));if(e.publicKey.byteLength!=a)throw new Error("expected PublicKey length ".concat(a,", ").concat(e.publicKey.byteLength," given"));if(t.byteLength!=s)throw new Error("expected PublicKey length ".concat(s,", ").concat(t.byteLength," given"));var r=it(e.inputArguments),i=j(e.networkType),f=Ae(e.timestamp),o=new be({signedTransaction:new je({transaction:new Le({protocolVersion:e.protocolVersion,virtualChainId:e.virtualChainId,timestamp:f,signer:new Ce({scheme:0,eddsa:new ke({networkType:i,signerPublicKey:e.publicKey})}),contractName:e.contractName,methodName:e.methodName,inputArgumentArray:r}),signature:new Uint8Array(We)})}).build(),c=new oe(o,o.byteLength,le,[]).getMessage(0),d=new oe(c,c.byteLength,qe,[]),u=b(d.rawBufferForField(0,0)),h=function(e,t){if(e.byteLength!=s)throw new Error("cannot sign with ed25519, private key invalid with length ".concat(e.byteLength));var r=new n.a.eddsa("ed25519"),i=Ge(e.subarray(0,s-a)),f=r.keyFromSecret(i);return new Uint8Array(f.sign(t).toBytes())}(t,u);return d.setBytes(1,h),[o,p(u,f)]}function ot(e){var t=new oe(e,e.byteLength,pe,[]);if(!t.isValid())throw new Error("response is corrupt and cannot be decoded");var r=t.getMessage(0),i=new oe(r,r.byteLength,ue,[]),n=I(i.getUint16(0)),a=t.getMessage(2),s=new oe(a,a.byteLength,Ve,[]),f=g.EXECUTION_RESULT_NOT_EXECUTED;a.byteLength>0&&(f=x(s.getUint16(1)));var o=nt(s.rawBufferWithHeaderForField(2,0)),c=at(s.rawBufferWithHeaderForField(3,0)),d=st(t.getUint16(1));return{requestStatus:n,txHash:s.getBytes(0),executionResult:f,outputArguments:o,outputEvents:c,transactionStatus:d,blockHeight:i.getUint64(1),blockTimestamp:_e(i.getUint64(2))}}function ct(e){var t=new oe(e,e.byteLength,ve,[]);if(!t.isValid())throw new Error("response is corrupt and cannot be decoded");var r=t.getMessage(0),i=new oe(r,r.byteLength,ue,[]),n=I(i.getUint16(0)),a=t.getMessage(1),s=new oe(a,a.byteLength,Je,[]),f=g.EXECUTION_RESULT_NOT_EXECUTED;return a.byteLength>0&&(f=x(s.getUint16(0))),{requestStatus:n,executionResult:f,outputArguments:nt(s.rawBufferWithHeaderForField(1,0)),outputEvents:at(s.rawBufferWithHeaderForField(2,0)),blockHeight:i.getUint64(1),blockTimestamp:_e(i.getUint64(2))}}function dt(e){var t=new oe(e,e.byteLength,ge,[]);if(!t.isValid())throw new Error("response is corrupt and cannot be decoded");var r=t.getMessage(0),i=new oe(r,r.byteLength,ue,[]),n=I(i.getUint16(0)),a=t.getMessage(2),s=new oe(a,a.byteLength,Ve,[]),f=g.EXECUTION_RESULT_NOT_EXECUTED;a.byteLength>0&&(f=x(s.getUint16(1)));var o=nt(s.rawBufferWithHeaderForField(2,0)),c=at(s.rawBufferWithHeaderForField(3,0)),d=st(t.getUint16(1));return{requestStatus:n,txHash:s.getBytes(0),executionResult:f,outputArguments:o,outputEvents:c,transactionStatus:d,blockHeight:i.getUint64(1),blockTimestamp:_e(i.getUint64(2))}}function ut(e){var t=new oe(e,e.byteLength,Te,[]);if(!t.isValid())throw new Error("response is corrupt and cannot be decoded");var r=t.getMessage(0),i=new oe(r,r.byteLength,ue,[]),n=I(i.getUint16(0)),a=t.getMessage(2),s=new oe(a,a.byteLength,Ve,[]),f=g.EXECUTION_RESULT_NOT_EXECUTED;a.byteLength>0&&(f=x(s.getUint16(1)));var o=nt(s.rawBufferWithHeaderForField(2,0)),c=at(s.rawBufferWithHeaderForField(3,0)),d=st(t.getUint16(1));return{requestStatus:n,txHash:s.getBytes(0),executionResult:f,outputArguments:o,outputEvents:c,transactionStatus:d,blockHeight:i.getUint64(1),blockTimestamp:_e(i.getUint64(2)),packedProof:t.getBytes(3),packedReceipt:a}}function ht(e){var t=new oe(e,e.byteLength,Se,[]);if(!t.isValid())throw new Error("response is corrupt and cannot be decoded");var r=t.getMessage(0),i=new oe(r,r.byteLength,ue,[]),n=I(i.getUint16(0)),a=t.getMessage(1),s=new oe(a,a.byteLength,Xe,[]),f=t.getMessage(5),o=new oe(f,f.byteLength,Ke,[]),c=[],d=t.getMessageArrayIterator(3),h=!0,l=!1,y=void 0;try{for(var v,m=d[Symbol.iterator]();!(h=(v=m.next()).done);h=!0){var g=v.value,w=B()(g,1)[0],T=new oe(w,w.byteLength,qe,[]).getMessage(0),M=new oe(T,T.byteLength,De,[]),S=nt(M.rawBufferWithHeaderForField(6,0)),A=void 0,_=M.getMessage(3),E=new oe(_,_.byteLength,ze,Be),U=E.isUnionIndex(0,0,0),R=B()(U,2),O=R[0],N=R[1];if(O){var k=E.getMessageInOffset(N);A=new oe(k,k.byteLength,Pe,[]).getBytes(1)}var C=b(T),z=M.getUint64(2);c.push({txHash:C,txId:p(C,z),protocolVersion:M.getUint32(0),virtualChainId:M.getUint32(1),timestamp:_e(z),signerPublicKey:A,contractName:M.getString(4),methodName:M.getString(5),inputArguments:S,executionResult:void 0,outputArguments:void 0,outputEvents:void 0})}}catch(e){l=!0,y=e}finally{try{h||null==m.return||m.return()}finally{if(l)throw y}}var P=t.getMessageArrayIterator(6),L=!0,D=!1,q=void 0;try{for(var j,V=P[Symbol.iterator]();!(L=(j=V.next()).done);L=!0)for(var F=j.value,H=B()(F,1)[0],J=new oe(H,H.byteLength,Ve,[]),X=J.getBytes(0),K=0;K<c.length;K++){var W=c[K];if(lt(W.txHash,X)){var G=x(J.getUint16(1));W.executionResult=G;var Y=nt(J.rawBufferWithHeaderForField(2,0));W.outputArguments=Y;var Z=at(J.rawBufferWithHeaderForField(3,0));W.outputEvents=Z}}}catch(e){D=!0,q=e}finally{try{L||null==V.return||V.return()}finally{if(D)throw q}}return{requestStatus:n,blockHeight:i.getUint64(1),blockTimestamp:_e(i.getUint64(2)),transactionsBlockHash:u(s.rawBuffer()),transactionsBlockHeader:{protocolVersion:s.getUint32(0),virtualChainId:s.getUint32(1),blockHeight:s.getUint64(2),prevBlockHash:s.getBytes(3),timestamp:_e(s.getUint64(4)),numTransactions:s.getUint32(7)},resultsBlockHash:u(o.rawBuffer()),resultsBlockHeader:{protocolVersion:o.getUint32(0),virtualChainId:o.getUint32(1),blockHeight:o.getUint64(2),prevBlockHash:o.getBytes(3),timestamp:_e(o.getUint64(4)),transactionsBlockHash:o.getBytes(7),numTransactionReceipts:o.getUint32(9)},transactions:c}}function lt(e,t){if(e.byteLength!=e.byteLength)return!1;for(var r=0;r<e.byteLength;r++)if(e[r]!=t[r])return!1;return!0}!function(e){e.TRANSACTION_STATUS_COMMITTED="COMMITTED",e.TRANSACTION_STATUS_DUPLICATE_TRANSACTION_ALREADY_COMMITTED="DUPLICATE_TRANSACTION_ALREADY_COMMITTED",e.TRANSACTION_STATUS_PENDING="PENDING",e.TRANSACTION_STATUS_DUPLICATE_TRANSACTION_ALREADY_PENDING="DUPLICATE_TRANSACTION_ALREADY_PENDING",e.TRANSACTION_STATUS_NO_RECORD_FOUND="NO_RECORD_FOUND",e.TRANSACTION_STATUS_REJECTED_UNSUPPORTED_VERSION="REJECTED_UNSUPPORTED_VERSION",e.TRANSACTION_STATUS_REJECTED_VIRTUAL_CHAIN_MISMATCH="REJECTED_VIRTUAL_CHAIN_MISMATCH",e.TRANSACTION_STATUS_REJECTED_TIMESTAMP_WINDOW_EXCEEDED="REJECTED_TIMESTAMP_WINDOW_EXCEEDED",e.TRANSACTION_STATUS_REJECTED_SIGNATURE_MISMATCH="REJECTED_SIGNATURE_MISMATCH",e.TRANSACTION_STATUS_REJECTED_UNKNOWN_SIGNER_SCHEME="REJECTED_UNKNOWN_SIGNER_SCHEME",e.TRANSACTION_STATUS_REJECTED_GLOBAL_PRE_ORDER="REJECTED_GLOBAL_PRE_ORDER",e.TRANSACTION_STATUS_REJECTED_VIRTUAL_CHAIN_PRE_ORDER="REJECTED_VIRTUAL_CHAIN_PRE_ORDER",e.TRANSACTION_STATUS_REJECTED_SMART_CONTRACT_PRE_ORDER="REJECTED_SMART_CONTRACT_PRE_ORDER",e.TRANSACTION_STATUS_REJECTED_TIMESTAMP_AHEAD_OF_NODE_TIME="REJECTED_TIMESTAMP_AHEAD_OF_NODE_TIME",e.TRANSACTION_STATUS_REJECTED_CONGESTION="REJECTED_CONGESTION",e.TRANSACTION_STATUS_REJECTED_NODE_OUT_OF_SYNC="REJECTED_NODE_OUT_OF_SYNC"}(Ye||(Ye={}));var bt=r(30),pt=r.n(bt),yt=function(){function e(t,r,i){L()(this,e),this.endpoint=t,this.virtualChainId=r,this.networkType=i}return q()(e,[{key:"createTransaction",value:function(e,t,r,i,n){var a=ft({protocolVersion:1,virtualChainId:this.virtualChainId,timestamp:new Date,networkType:this.networkType,publicKey:e,contractName:r,methodName:i,inputArguments:n},t),s=B()(a,2);return[s[0],S(s[1])]}},{key:"createQuery",value:function(e,t,r,i){return function(e){if(1!=e.protocolVersion)throw new Error("expected ProtocolVersion 1, ".concat(e.protocolVersion," given"));if(e.publicKey.byteLength!=a)throw new Error("expected PublicKey length ".concat(a,", ").concat(e.publicKey.byteLength," given"));var t=it(e.inputArguments),r=j(e.networkType);return new ye({signedQuery:new He({query:new Fe({protocolVersion:e.protocolVersion,virtualChainId:e.virtualChainId,timestamp:Ae(e.timestamp),signer:new Ce({scheme:0,eddsa:new ke({networkType:r,signerPublicKey:e.publicKey})}),contractName:e.contractName,methodName:e.methodName,inputArgumentArray:t}),signature:null})}).build()}({protocolVersion:1,virtualChainId:this.virtualChainId,timestamp:new Date,networkType:this.networkType,publicKey:e,contractName:t,methodName:r,inputArguments:i})}},{key:"createGetTransactionStatusPayload",value:function(e){var t=A(e);return function(e){if(1!=e.protocolVersion)throw new Error("expected ProtocolVersion 1, ".concat(e.protocolVersion," given"));if(e.txId.byteLength!=l)throw new Error("expected TxId length ".concat(l,", ").concat(e.txId.byteLength," given"));var t=y(e.txId),r=B()(t,2),i=r[0],n=r[1];return new me({transactionRef:new he({protocolVersion:e.protocolVersion,virtualChainId:e.virtualChainId,transactionTimestamp:n,txHash:i})}).build()}({protocolVersion:1,virtualChainId:this.virtualChainId,txId:t})}},{key:"createGetTransactionReceiptProofPayload",value:function(e){var t=A(e);return function(e){if(1!=e.protocolVersion)throw new Error("expected ProtocolVersion 1, ".concat(e.protocolVersion," given"));if(e.txId.byteLength!=l)throw new Error("expected TxId length ".concat(l,", ").concat(e.txId.byteLength," given"));var t=y(e.txId),r=B()(t,2),i=r[0],n=r[1];return new we({transactionRef:new he({protocolVersion:e.protocolVersion,virtualChainId:e.virtualChainId,transactionTimestamp:n,txHash:i})}).build()}({protocolVersion:1,virtualChainId:this.virtualChainId,txId:t})}},{key:"createGetBlockPayload",value:function(e){return function(e){if(1!=e.protocolVersion)throw new Error("expected ProtocolVersion 1, ".concat(e.protocolVersion," given"));return new Me({protocolVersion:e.protocolVersion,virtualChainId:e.virtualChainId,blockHeight:e.blockHeight}).build()}({protocolVersion:1,virtualChainId:this.virtualChainId,blockHeight:e})}},{key:"sendTransaction",value:function(){var e=C()(N.a.mark(function e(t){var r;return N.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.sendHttpPost("/api/v1/send-transaction",t);case 2:return r=e.sent,e.abrupt("return",ot(r));case 4:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"sendQuery",value:function(){var e=C()(N.a.mark(function e(t){var r;return N.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.sendHttpPost("/api/v1/run-query",t);case 2:return r=e.sent,e.abrupt("return",ct(r));case 4:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"getTransactionStatus",value:function(){var e=C()(N.a.mark(function e(t){var r,i;return N.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.createGetTransactionStatusPayload(t),e.next=3,this.sendHttpPost("/api/v1/get-transaction-status",r);case 3:return i=e.sent,e.abrupt("return",dt(i));case 5:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"getTransactionReceiptProof",value:function(){var e=C()(N.a.mark(function e(t){var r,i;return N.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.createGetTransactionReceiptProofPayload(t),e.next=3,this.sendHttpPost("/api/v1/get-transaction-receipt-proof",r);case 3:return i=e.sent,e.abrupt("return",ut(i));case 5:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"getBlock",value:function(){var e=C()(N.a.mark(function e(t){var r,i;return N.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=this.createGetBlockPayload(t),e.next=3,this.sendHttpPost("/api/v1/get-block",r);case 3:return i=e.sent,e.abrupt("return",ht(i));case 5:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"sendHttpPost",value:function(){var e=C()(N.a.mark(function e(t,r){var i,n;return N.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r&&0!=r.byteLength){e.next=2;break}throw new Error("payload sent by http is empty");case 2:return e.next=4,pt.a.post(this.endpoint+t,r,{headers:{"content-type":"application/membuffers"},responseType:"arraybuffer",validateStatus:function(e){return!0}});case 4:if(i=e.sent,"application/membuffers"==(n=i.headers["content-type"])){e.next=12;break}if("text/plain"!=n&&"application/json"!=n){e.next=11;break}throw new Error("http request failed: ".concat(M().decode(i.data)));case 11:throw new Error("http request failed with unexpected Content-Type '".concat(n,"'"));case 12:if(i.data){e.next=14;break}throw new Error("no response data available, http status: ".concat(i.status," ").concat(i.statusText));case 14:if(i.data.constructor!==ArrayBuffer){e.next=16;break}return e.abrupt("return",new Uint8Array(i.data));case 16:return e.abrupt("return",i.data);case 17:case"end":return e.stop()}},e,this)}));return function(t,r){return e.apply(this,arguments)}}()}]),e}();r.d(t,"createAccount",function(){return _}),r.d(t,"addressToBytes",function(){return E}),r.d(t,"bytesToAddress",function(){return U}),r.d(t,"ExecutionResult",function(){return g}),r.d(t,"RequestStatus",function(){return w}),r.d(t,"Client",function(){return yt}),r.d(t,"argUint32",function(){return Ze}),r.d(t,"argUint64",function(){return Qe}),r.d(t,"argString",function(){return $e}),r.d(t,"argBytes",function(){return et}),r.d(t,"argAddress",function(){return tt}),r.d(t,"NetworkType",function(){return R})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,